// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, formDataBodySerializer } from '@hey-api/client-fetch';
import type { ActivitypubPersonData, ActivitypubPersonResponse, ActivitypubPersonInboxData, AdminCronListData, AdminCronListResponse, AdminCronRunData, AdminGetAllEmailsData, AdminGetAllEmailsResponse, AdminSearchEmailsData, AdminSearchEmailsResponse, AdminListHooksData, AdminListHooksResponse, AdminCreateHookData, AdminCreateHookResponse, AdminDeleteHookData, AdminGetHookData, AdminGetHookResponse, AdminEditHookData, AdminEditHookResponse, AdminGetAllOrgsData, AdminGetAllOrgsResponse, AdminGetRunnerRegistrationTokenData, AdminUnadoptedListData, AdminUnadoptedListResponse, AdminDeleteUnadoptedRepositoryData, AdminAdoptRepositoryData, AdminSearchUsersData, AdminSearchUsersResponse, AdminCreateUserData, AdminCreateUserResponse, AdminDeleteUserData, AdminEditUserData, AdminEditUserResponse, AdminDeleteUserBadgesData, AdminListUserBadgesData, AdminListUserBadgesResponse, AdminAddUserBadgesData, AdminCreatePublicKeyData, AdminCreatePublicKeyResponse, AdminDeleteUserPublicKeyData, AdminCreateOrgData, AdminCreateOrgResponse, AdminRenameUserData, AdminCreateRepoData, AdminCreateRepoResponse, ListGitignoresTemplatesData, ListGitignoresTemplatesResponse, GetGitignoreTemplateInfoData, GetGitignoreTemplateInfoResponse, ListLabelTemplatesData, ListLabelTemplatesResponse, GetLabelTemplateInfoData, GetLabelTemplateInfoResponse, ListLicenseTemplatesData, ListLicenseTemplatesResponse, GetLicenseTemplateInfoData, GetLicenseTemplateInfoResponse, RenderMarkdownData, RenderMarkdownResponse, RenderMarkdownRawData, RenderMarkdownRawResponse, RenderMarkupData, RenderMarkupResponse, GetNodeInfoData, GetNodeInfoResponse, NotifyGetListData, NotifyGetListResponse, NotifyReadListData, NotifyReadListResponse, NotifyNewAvailableData, NotifyNewAvailableResponse, NotifyGetThreadData, NotifyGetThreadResponse, NotifyReadThreadData, NotifyReadThreadResponse, CreateOrgRepoDeprecatedData, CreateOrgRepoDeprecatedResponse, OrgGetAllData, OrgGetAllResponse, OrgCreateData, OrgCreateResponse, OrgDeleteData, OrgGetData, OrgGetResponse, OrgEditData, OrgEditResponse, OrgGetRunnerRegistrationTokenData, OrgListActionsSecretsData, OrgListActionsSecretsResponse, DeleteOrgSecretData, UpdateOrgSecretData, GetOrgVariablesListData, GetOrgVariablesListResponse, DeleteOrgVariableData, DeleteOrgVariableResponse, GetOrgVariableData, GetOrgVariableResponse, CreateOrgVariableData, UpdateOrgVariableData, OrgListActivityFeedsData, OrgListActivityFeedsResponse, OrgDeleteAvatarData, OrgUpdateAvatarData, OrganizationListBlocksData, OrganizationListBlocksResponse, OrganizationUnblockUserData, OrganizationCheckUserBlockData, OrganizationBlockUserData, OrgListHooksData, OrgListHooksResponse, OrgCreateHookData, OrgCreateHookResponse, OrgDeleteHookData, OrgGetHookData, OrgGetHookResponse, OrgEditHookData, OrgEditHookResponse, OrgListLabelsData, OrgListLabelsResponse, OrgCreateLabelData, OrgCreateLabelResponse, OrgDeleteLabelData, OrgGetLabelData, OrgGetLabelResponse, OrgEditLabelData, OrgEditLabelResponse, OrgListMembersData, OrgListMembersResponse, OrgDeleteMemberData, OrgIsMemberData, OrgListPublicMembersData, OrgListPublicMembersResponse, OrgConcealMemberData, OrgIsPublicMemberData, OrgPublicizeMemberData, RenameOrgData, OrgListReposData, OrgListReposResponse, CreateOrgRepoData, CreateOrgRepoResponse, OrgListTeamsData, OrgListTeamsResponse, OrgCreateTeamData, OrgCreateTeamResponse, TeamSearchData, TeamSearchResponse, ListPackagesData, ListPackagesResponse, LinkPackageData, UnlinkPackageData, DeletePackageData, GetPackageData, GetPackageResponse, ListPackageFilesData, ListPackageFilesResponse, IssueSearchIssuesData, IssueSearchIssuesResponse, RepoMigrateData, RepoMigrateResponse, RepoSearchData, RepoSearchResponse, RepoDeleteData, RepoGetData, RepoGetResponse, RepoEditData, RepoEditResponse, GetArtifactsData, GetArtifactsResponse, DeleteArtifactData, GetArtifactData, GetArtifactResponse, DownloadArtifactData, RepoGetRunnerRegistrationTokenData, GetArtifactsOfRunData, GetArtifactsOfRunResponse, RepoListActionsSecretsData, RepoListActionsSecretsResponse, DeleteRepoSecretData, UpdateRepoSecretData, ListActionTasksData, ListActionTasksResponse, GetRepoVariablesListData, GetRepoVariablesListResponse, DeleteRepoVariableData, DeleteRepoVariableResponse, GetRepoVariableData, GetRepoVariableResponse, CreateRepoVariableData, UpdateRepoVariableData, ActionsListRepositoryWorkflowsData, ActionsListRepositoryWorkflowsResponse, ActionsGetWorkflowData, ActionsGetWorkflowResponse, ActionsDisableWorkflowData, ActionsDispatchWorkflowData, ActionsEnableWorkflowData, RepoListActivityFeedsData, RepoListActivityFeedsResponse, RepoGetArchiveData, RepoGetAssigneesData, RepoGetAssigneesResponse, RepoDeleteAvatarData, RepoUpdateAvatarData, RepoListBranchProtectionData, RepoListBranchProtectionResponse, RepoCreateBranchProtectionData, RepoCreateBranchProtectionResponse, RepoUpdateBranchProtectionPrioriesData, RepoDeleteBranchProtectionData, RepoGetBranchProtectionData, RepoGetBranchProtectionResponse, RepoEditBranchProtectionData, RepoEditBranchProtectionResponse, RepoListBranchesData, RepoListBranchesResponse, RepoCreateBranchData, RepoCreateBranchResponse, RepoDeleteBranchData, RepoGetBranchData, RepoGetBranchResponse, RepoUpdateBranchData, RepoListCollaboratorsData, RepoListCollaboratorsResponse, RepoDeleteCollaboratorData, RepoCheckCollaboratorData, RepoAddCollaboratorData, RepoGetRepoPermissionsData, RepoGetRepoPermissionsResponse, RepoGetAllCommitsData, RepoGetAllCommitsResponse, RepoGetAllCommitsError, RepoGetCombinedStatusByRefData, RepoGetCombinedStatusByRefResponse, RepoListStatusesByRefData, RepoListStatusesByRefResponse, RepoGetCommitPullRequestData, RepoGetCommitPullRequestResponse, RepoCompareDiffData, RepoCompareDiffResponse, RepoGetContentsListData, RepoGetContentsListResponse, RepoChangeFilesData, RepoChangeFilesResponse, RepoDeleteFileData, RepoDeleteFileResponse, RepoGetContentsData, RepoGetContentsResponse, RepoCreateFileData, RepoCreateFileResponse, RepoUpdateFileData, RepoUpdateFileResponse, RepoApplyDiffPatchData, RepoApplyDiffPatchResponse, RepoGetEditorConfigData, ListForksData, ListForksResponse, CreateForkData, CreateForkResponse, GetBlobData, GetBlobResponse, RepoGetSingleCommitData, RepoGetSingleCommitResponse, RepoDownloadCommitDiffOrPatchData, RepoDownloadCommitDiffOrPatchResponse, RepoGetNoteData, RepoGetNoteResponse, RepoListAllGitRefsData, RepoListAllGitRefsResponse, RepoListGitRefsData, RepoListGitRefsResponse, GetAnnotatedTagData, GetAnnotatedTagResponse, GetTreeData, GetTreeResponse, RepoListHooksData, RepoListHooksResponse, RepoCreateHookData, RepoCreateHookResponse, RepoListGitHooksData, RepoListGitHooksResponse, RepoDeleteGitHookData, RepoGetGitHookData, RepoGetGitHookResponse, RepoEditGitHookData, RepoEditGitHookResponse, RepoDeleteHookData, RepoGetHookData, RepoGetHookResponse, RepoEditHookData, RepoEditHookResponse, RepoTestHookData, RepoGetIssueConfigData, RepoGetIssueConfigResponse, RepoValidateIssueConfigData, RepoValidateIssueConfigResponse, RepoGetIssueTemplatesData, RepoGetIssueTemplatesResponse, IssueListIssuesData, IssueListIssuesResponse, IssueCreateIssueData, IssueCreateIssueResponse, IssueGetRepoCommentsData, IssueGetRepoCommentsResponse, IssueDeleteCommentData, IssueGetCommentData, IssueGetCommentResponse, IssueEditCommentData, IssueEditCommentResponse, IssueListIssueCommentAttachmentsData, IssueListIssueCommentAttachmentsResponse, IssueCreateIssueCommentAttachmentData, IssueCreateIssueCommentAttachmentResponse, IssueDeleteIssueCommentAttachmentData, IssueGetIssueCommentAttachmentData, IssueGetIssueCommentAttachmentResponse, IssueEditIssueCommentAttachmentData, IssueEditIssueCommentAttachmentResponse, IssueDeleteCommentReactionData, IssueGetCommentReactionsData, IssueGetCommentReactionsResponse, IssuePostCommentReactionData, IssuePostCommentReactionResponse, RepoListPinnedIssuesData, RepoListPinnedIssuesResponse, IssueDeleteData, IssueGetIssueData, IssueGetIssueResponse, IssueEditIssueData, IssueEditIssueResponse, IssueListIssueAttachmentsData, IssueListIssueAttachmentsResponse, IssueCreateIssueAttachmentData, IssueCreateIssueAttachmentResponse, IssueDeleteIssueAttachmentData, IssueGetIssueAttachmentData, IssueGetIssueAttachmentResponse, IssueEditIssueAttachmentData, IssueEditIssueAttachmentResponse, IssueRemoveIssueBlockingData, IssueRemoveIssueBlockingResponse, IssueListBlocksData, IssueListBlocksResponse, IssueCreateIssueBlockingData, IssueCreateIssueBlockingResponse, IssueGetCommentsData, IssueGetCommentsResponse, IssueCreateCommentData, IssueCreateCommentResponse, IssueDeleteCommentDeprecatedData, IssueEditCommentDeprecatedData, IssueEditCommentDeprecatedResponse, IssueEditIssueDeadlineData, IssueEditIssueDeadlineResponse, IssueRemoveIssueDependenciesData, IssueRemoveIssueDependenciesResponse, IssueListIssueDependenciesData, IssueListIssueDependenciesResponse, IssueCreateIssueDependenciesData, IssueCreateIssueDependenciesResponse, IssueClearLabelsData, IssueGetLabelsData, IssueGetLabelsResponse, IssueAddLabelData, IssueAddLabelResponse, IssueReplaceLabelsData, IssueReplaceLabelsResponse, IssueRemoveLabelData, UnpinIssueData, PinIssueData, MoveIssuePinData, IssueDeleteIssueReactionData, IssueGetIssueReactionsData, IssueGetIssueReactionsResponse, IssuePostIssueReactionData, IssuePostIssueReactionResponse, IssueDeleteStopWatchData, IssueStartStopWatchData, IssueStopStopWatchData, IssueSubscriptionsData, IssueSubscriptionsResponse, IssueCheckSubscriptionData, IssueCheckSubscriptionResponse, IssueDeleteSubscriptionData, IssueAddSubscriptionData, IssueGetCommentsAndTimelineData, IssueGetCommentsAndTimelineResponse, IssueResetTimeData, IssueTrackedTimesData, IssueTrackedTimesResponse, IssueAddTimeData, IssueAddTimeResponse, IssueDeleteTimeData, RepoListKeysData, RepoListKeysResponse, RepoCreateKeyData, RepoCreateKeyResponse, RepoDeleteKeyData, RepoGetKeyData, RepoGetKeyResponse, IssueListLabelsData, IssueListLabelsResponse, IssueCreateLabelData, IssueCreateLabelResponse, IssueDeleteLabelData, IssueGetLabelData, IssueGetLabelResponse, IssueEditLabelData, IssueEditLabelResponse, RepoGetLanguagesData, RepoGetLanguagesResponse, RepoGetLicensesData, RepoGetLicensesResponse, RepoGetRawFileOrLfsData, RepoGetRawFileOrLfsError, RepoMergeUpstreamData, RepoMergeUpstreamResponse, IssueGetMilestonesListData, IssueGetMilestonesListResponse, IssueCreateMilestoneData, IssueCreateMilestoneResponse, IssueDeleteMilestoneData, IssueGetMilestoneData, IssueGetMilestoneResponse, IssueEditMilestoneData, IssueEditMilestoneResponse, RepoMirrorSyncData, RepoNewPinAllowedData, RepoNewPinAllowedResponse, NotifyGetRepoListData, NotifyGetRepoListResponse, NotifyReadRepoListData, NotifyReadRepoListResponse, RepoListPullRequestsData, RepoListPullRequestsResponse, RepoCreatePullRequestData, RepoCreatePullRequestResponse, RepoListPinnedPullRequestsData, RepoListPinnedPullRequestsResponse, RepoGetPullRequestByBaseHeadData, RepoGetPullRequestByBaseHeadResponse, RepoGetPullRequestData, RepoGetPullRequestResponse, RepoEditPullRequestData, RepoEditPullRequestResponse, RepoDownloadPullDiffOrPatchData, RepoDownloadPullDiffOrPatchResponse, RepoGetPullRequestCommitsData, RepoGetPullRequestCommitsResponse, RepoGetPullRequestFilesData, RepoGetPullRequestFilesResponse, RepoCancelScheduledAutoMergeData, RepoPullRequestIsMergedData, RepoMergePullRequestData, RepoDeletePullReviewRequestsData, RepoCreatePullReviewRequestsData, RepoCreatePullReviewRequestsResponse, RepoListPullReviewsData, RepoListPullReviewsResponse, RepoCreatePullReviewData, RepoCreatePullReviewResponse, RepoDeletePullReviewData, RepoGetPullReviewData, RepoGetPullReviewResponse, RepoSubmitPullReviewData, RepoSubmitPullReviewResponse, RepoGetPullReviewCommentsData, RepoGetPullReviewCommentsResponse, RepoDismissPullReviewData, RepoDismissPullReviewResponse, RepoUnDismissPullReviewData, RepoUnDismissPullReviewResponse, RepoUpdatePullRequestData, RepoListPushMirrorsData, RepoListPushMirrorsResponse, RepoAddPushMirrorData, RepoAddPushMirrorResponse, RepoPushMirrorSyncData, RepoDeletePushMirrorData, RepoGetPushMirrorByRemoteNameData, RepoGetPushMirrorByRemoteNameResponse, RepoGetRawFileData, RepoGetRawFileError, RepoListReleasesData, RepoListReleasesResponse, RepoCreateReleaseData, RepoCreateReleaseResponse, RepoGetLatestReleaseData, RepoGetLatestReleaseResponse, RepoDeleteReleaseByTagData, RepoGetReleaseByTagData, RepoGetReleaseByTagResponse, RepoDeleteReleaseData, RepoGetReleaseData, RepoGetReleaseResponse, RepoEditReleaseData, RepoEditReleaseResponse, RepoListReleaseAttachmentsData, RepoListReleaseAttachmentsResponse, RepoCreateReleaseAttachmentData, RepoCreateReleaseAttachmentResponse, RepoDeleteReleaseAttachmentData, RepoGetReleaseAttachmentData, RepoGetReleaseAttachmentResponse, RepoEditReleaseAttachmentData, RepoEditReleaseAttachmentResponse, RepoGetReviewersData, RepoGetReviewersResponse, RepoSigningKeyData, RepoSigningKeyResponse, RepoListStargazersData, RepoListStargazersResponse, RepoListStatusesData, RepoListStatusesResponse, RepoCreateStatusData, RepoCreateStatusResponse, RepoListSubscribersData, RepoListSubscribersResponse, UserCurrentDeleteSubscriptionData, UserCurrentCheckSubscriptionData, UserCurrentCheckSubscriptionResponse, UserCurrentPutSubscriptionData, UserCurrentPutSubscriptionResponse, RepoListTagProtectionData, RepoListTagProtectionResponse, RepoCreateTagProtectionData, RepoCreateTagProtectionResponse, RepoDeleteTagProtectionData, RepoGetTagProtectionData, RepoGetTagProtectionResponse, RepoEditTagProtectionData, RepoEditTagProtectionResponse, RepoListTagsData, RepoListTagsResponse, RepoCreateTagData, RepoCreateTagResponse, RepoDeleteTagData, RepoGetTagData, RepoGetTagResponse, RepoListTeamsData, RepoListTeamsResponse, RepoDeleteTeamData, RepoCheckTeamData, RepoCheckTeamResponse, RepoAddTeamData, RepoTrackedTimesData, RepoTrackedTimesResponse, UserTrackedTimesData, UserTrackedTimesResponse, RepoListTopicsData, RepoListTopicsResponse, RepoUpdateTopicsData, RepoDeleteTopicData, RepoAddTopicData, RepoTransferData, RepoTransferResponse, AcceptRepoTransferData, AcceptRepoTransferResponse, RejectRepoTransferData, RejectRepoTransferResponse, RepoCreateWikiPageData, RepoCreateWikiPageResponse, RepoDeleteWikiPageData, RepoGetWikiPageData, RepoGetWikiPageResponse, RepoEditWikiPageData, RepoEditWikiPageResponse, RepoGetWikiPagesData, RepoGetWikiPagesResponse, RepoGetWikiPageRevisionsData, RepoGetWikiPageRevisionsResponse, GenerateRepoData, GenerateRepoResponse, RepoGetByIdData, RepoGetByIdResponse, GetGeneralApiSettingsData, GetGeneralApiSettingsResponse, GetGeneralAttachmentSettingsData, GetGeneralAttachmentSettingsResponse, GetGeneralRepositorySettingsData, GetGeneralRepositorySettingsResponse, GetGeneralUiSettingsData, GetGeneralUiSettingsResponse, GetSigningKeyData, GetSigningKeyResponse, OrgDeleteTeamData, OrgGetTeamData, OrgGetTeamResponse, OrgEditTeamData, OrgEditTeamResponse, OrgListTeamActivityFeedsData, OrgListTeamActivityFeedsResponse, OrgListTeamMembersData, OrgListTeamMembersResponse, OrgRemoveTeamMemberData, OrgListTeamMemberData, OrgListTeamMemberResponse, OrgAddTeamMemberData, OrgListTeamReposData, OrgListTeamReposResponse, OrgRemoveTeamRepositoryData, OrgListTeamRepoData, OrgListTeamRepoResponse, OrgAddTeamRepositoryData, TopicSearchData, TopicSearchResponse, UserGetCurrentData, UserGetCurrentResponse, UserGetRunnerRegistrationTokenData, DeleteUserSecretData, UpdateUserSecretData, GetUserVariablesListData, GetUserVariablesListResponse, DeleteUserVariableData, GetUserVariableData, GetUserVariableResponse, CreateUserVariableData, UpdateUserVariableData, UserGetOauth2ApplicationData, UserGetOauth2ApplicationResponse, UserCreateOAuth2ApplicationData, UserCreateOAuth2ApplicationResponse, UserDeleteOAuth2ApplicationData, UserGetOAuth2ApplicationData, UserGetOAuth2ApplicationResponse, UserUpdateOAuth2ApplicationData, UserUpdateOAuth2ApplicationResponse, UserDeleteAvatarData, UserUpdateAvatarData, UserListBlocksData, UserListBlocksResponse, UserUnblockUserData, UserCheckUserBlockData, UserBlockUserData, UserDeleteEmailData, UserListEmailsData, UserListEmailsResponse, UserAddEmailData, UserAddEmailResponse, UserCurrentListFollowersData, UserCurrentListFollowersResponse, UserCurrentListFollowingData, UserCurrentListFollowingResponse, UserCurrentDeleteFollowData, UserCurrentCheckFollowingData, UserCurrentPutFollowData, GetVerificationTokenData, GetVerificationTokenResponse, UserVerifyGpgKeyData, UserVerifyGpgKeyResponse, UserCurrentListGpgKeysData, UserCurrentListGpgKeysResponse, UserCurrentPostGpgKeyData, UserCurrentPostGpgKeyResponse, UserCurrentDeleteGpgKeyData, UserCurrentGetGpgKeyData, UserCurrentGetGpgKeyResponse, UserListHooksData, UserListHooksResponse, UserCreateHookData, UserCreateHookResponse, UserDeleteHookData, UserGetHookData, UserGetHookResponse, UserEditHookData, UserEditHookResponse, UserCurrentListKeysData, UserCurrentListKeysResponse, UserCurrentPostKeyData, UserCurrentPostKeyResponse, UserCurrentDeleteKeyData, UserCurrentGetKeyData, UserCurrentGetKeyResponse, OrgListCurrentUserOrgsData, OrgListCurrentUserOrgsResponse, UserCurrentListReposData, UserCurrentListReposResponse, CreateCurrentUserRepoData, CreateCurrentUserRepoResponse, GetUserSettingsData, GetUserSettingsResponse, UpdateUserSettingsData, UpdateUserSettingsResponse, UserCurrentListStarredData, UserCurrentListStarredResponse, UserCurrentDeleteStarData, UserCurrentCheckStarringData, UserCurrentPutStarData, UserGetStopWatchesData, UserGetStopWatchesResponse, UserCurrentListSubscriptionsData, UserCurrentListSubscriptionsResponse, UserListTeamsData, UserListTeamsResponse, UserCurrentTrackedTimesData, UserCurrentTrackedTimesResponse, UserSearchData, UserSearchResponse, UserGetData, UserGetResponse, UserListActivityFeedsData, UserListActivityFeedsResponse, UserListFollowersData, UserListFollowersResponse, UserListFollowingData, UserListFollowingResponse, UserCheckFollowingData, UserListGpgKeysData, UserListGpgKeysResponse, UserGetHeatmapDataData, UserGetHeatmapDataResponse, UserListKeysData, UserListKeysResponse, OrgListUserOrgsData, OrgListUserOrgsResponse, OrgGetUserPermissionsData, OrgGetUserPermissionsResponse, UserListReposData, UserListReposResponse, UserListStarredData, UserListStarredResponse, UserListSubscriptionsData, UserListSubscriptionsResponse, UserGetTokensData, UserGetTokensResponse, UserCreateTokenData, UserCreateTokenResponse, UserDeleteAccessTokenData, GetVersionData, GetVersionResponse } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Returns the Person actor for a user
 */
export const activitypubPerson = <ThrowOnError extends boolean = false>(options: Options<ActivitypubPersonData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ActivitypubPersonResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/activitypub/user-id/{user-id}',
        ...options
    });
};

/**
 * Send to the inbox
 */
export const activitypubPersonInbox = <ThrowOnError extends boolean = false>(options: Options<ActivitypubPersonInboxData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/activitypub/user-id/{user-id}/inbox',
        ...options
    });
};

/**
 * List cron tasks
 */
export const adminCronList = <ThrowOnError extends boolean = false>(options?: Options<AdminCronListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AdminCronListResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/admin/cron',
        ...options
    });
};

/**
 * Run cron task
 */
export const adminCronRun = <ThrowOnError extends boolean = false>(options: Options<AdminCronRunData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/admin/cron/{task}',
        ...options
    });
};

/**
 * List all emails
 */
export const adminGetAllEmails = <ThrowOnError extends boolean = false>(options?: Options<AdminGetAllEmailsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AdminGetAllEmailsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/admin/emails',
        ...options
    });
};

/**
 * Search all emails
 */
export const adminSearchEmails = <ThrowOnError extends boolean = false>(options?: Options<AdminSearchEmailsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AdminSearchEmailsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/admin/emails/search',
        ...options
    });
};

/**
 * List system's webhooks
 */
export const adminListHooks = <ThrowOnError extends boolean = false>(options?: Options<AdminListHooksData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AdminListHooksResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/admin/hooks',
        ...options
    });
};

/**
 * Create a hook
 */
export const adminCreateHook = <ThrowOnError extends boolean = false>(options: Options<AdminCreateHookData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AdminCreateHookResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/admin/hooks',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a hook
 */
export const adminDeleteHook = <ThrowOnError extends boolean = false>(options: Options<AdminDeleteHookData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/admin/hooks/{id}',
        ...options
    });
};

/**
 * Get a hook
 */
export const adminGetHook = <ThrowOnError extends boolean = false>(options: Options<AdminGetHookData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AdminGetHookResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/admin/hooks/{id}',
        ...options
    });
};

/**
 * Update a hook
 */
export const adminEditHook = <ThrowOnError extends boolean = false>(options: Options<AdminEditHookData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<AdminEditHookResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/admin/hooks/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List all organizations
 */
export const adminGetAllOrgs = <ThrowOnError extends boolean = false>(options?: Options<AdminGetAllOrgsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AdminGetAllOrgsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/admin/orgs',
        ...options
    });
};

/**
 * Get an global actions runner registration token
 */
export const adminGetRunnerRegistrationToken = <ThrowOnError extends boolean = false>(options?: Options<AdminGetRunnerRegistrationTokenData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/admin/runners/registration-token',
        ...options
    });
};

/**
 * List unadopted repositories
 */
export const adminUnadoptedList = <ThrowOnError extends boolean = false>(options?: Options<AdminUnadoptedListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AdminUnadoptedListResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/admin/unadopted',
        ...options
    });
};

/**
 * Delete unadopted files
 */
export const adminDeleteUnadoptedRepository = <ThrowOnError extends boolean = false>(options: Options<AdminDeleteUnadoptedRepositoryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/admin/unadopted/{owner}/{repo}',
        ...options
    });
};

/**
 * Adopt unadopted files as a repository
 */
export const adminAdoptRepository = <ThrowOnError extends boolean = false>(options: Options<AdminAdoptRepositoryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/admin/unadopted/{owner}/{repo}',
        ...options
    });
};

/**
 * Search users according filter conditions
 */
export const adminSearchUsers = <ThrowOnError extends boolean = false>(options?: Options<AdminSearchUsersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AdminSearchUsersResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/admin/users',
        ...options
    });
};

/**
 * Create a user
 */
export const adminCreateUser = <ThrowOnError extends boolean = false>(options?: Options<AdminCreateUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AdminCreateUserResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/admin/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a user
 */
export const adminDeleteUser = <ThrowOnError extends boolean = false>(options: Options<AdminDeleteUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/admin/users/{username}',
        ...options
    });
};

/**
 * Edit an existing user
 */
export const adminEditUser = <ThrowOnError extends boolean = false>(options: Options<AdminEditUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<AdminEditUserResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/admin/users/{username}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Remove a badge from a user
 */
export const adminDeleteUserBadges = <ThrowOnError extends boolean = false>(options: Options<AdminDeleteUserBadgesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/admin/users/{username}/badges',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List a user's badges
 */
export const adminListUserBadges = <ThrowOnError extends boolean = false>(options: Options<AdminListUserBadgesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AdminListUserBadgesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/admin/users/{username}/badges',
        ...options
    });
};

/**
 * Add a badge to a user
 */
export const adminAddUserBadges = <ThrowOnError extends boolean = false>(options: Options<AdminAddUserBadgesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/admin/users/{username}/badges',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Add a public key on behalf of a user
 */
export const adminCreatePublicKey = <ThrowOnError extends boolean = false>(options: Options<AdminCreatePublicKeyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AdminCreatePublicKeyResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/admin/users/{username}/keys',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a user's public key
 */
export const adminDeleteUserPublicKey = <ThrowOnError extends boolean = false>(options: Options<AdminDeleteUserPublicKeyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/admin/users/{username}/keys/{id}',
        ...options
    });
};

/**
 * Create an organization
 */
export const adminCreateOrg = <ThrowOnError extends boolean = false>(options: Options<AdminCreateOrgData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AdminCreateOrgResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/admin/users/{username}/orgs',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Rename a user
 */
export const adminRenameUser = <ThrowOnError extends boolean = false>(options: Options<AdminRenameUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/admin/users/{username}/rename',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Create a repository on behalf of a user
 */
export const adminCreateRepo = <ThrowOnError extends boolean = false>(options: Options<AdminCreateRepoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AdminCreateRepoResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/admin/users/{username}/repos',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Returns a list of all gitignore templates
 */
export const listGitignoresTemplates = <ThrowOnError extends boolean = false>(options?: Options<ListGitignoresTemplatesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListGitignoresTemplatesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/gitignore/templates',
        ...options
    });
};

/**
 * Returns information about a gitignore template
 */
export const getGitignoreTemplateInfo = <ThrowOnError extends boolean = false>(options: Options<GetGitignoreTemplateInfoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetGitignoreTemplateInfoResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/gitignore/templates/{name}',
        ...options
    });
};

/**
 * Returns a list of all label templates
 */
export const listLabelTemplates = <ThrowOnError extends boolean = false>(options?: Options<ListLabelTemplatesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListLabelTemplatesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/label/templates',
        ...options
    });
};

/**
 * Returns all labels in a template
 */
export const getLabelTemplateInfo = <ThrowOnError extends boolean = false>(options: Options<GetLabelTemplateInfoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetLabelTemplateInfoResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/label/templates/{name}',
        ...options
    });
};

/**
 * Returns a list of all license templates
 */
export const listLicenseTemplates = <ThrowOnError extends boolean = false>(options?: Options<ListLicenseTemplatesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListLicenseTemplatesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/licenses',
        ...options
    });
};

/**
 * Returns information about a license template
 */
export const getLicenseTemplateInfo = <ThrowOnError extends boolean = false>(options: Options<GetLicenseTemplateInfoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetLicenseTemplateInfoResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/licenses/{name}',
        ...options
    });
};

/**
 * Render a markdown document as HTML
 */
export const renderMarkdown = <ThrowOnError extends boolean = false>(options?: Options<RenderMarkdownData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<RenderMarkdownResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/markdown',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Render raw markdown as HTML
 */
export const renderMarkdownRaw = <ThrowOnError extends boolean = false>(options: Options<RenderMarkdownRawData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RenderMarkdownRawResponse, unknown, ThrowOnError>({
        bodySerializer: null,
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/markdown/raw',
        ...options,
        headers: {
            'Content-Type': 'text/plain',
            ...options?.headers
        }
    });
};

/**
 * Render a markup document as HTML
 */
export const renderMarkup = <ThrowOnError extends boolean = false>(options?: Options<RenderMarkupData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<RenderMarkupResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/markup',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Returns the nodeinfo of the Gitea application
 */
export const getNodeInfo = <ThrowOnError extends boolean = false>(options?: Options<GetNodeInfoData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetNodeInfoResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/nodeinfo',
        ...options
    });
};

/**
 * List users's notification threads
 */
export const notifyGetList = <ThrowOnError extends boolean = false>(options?: Options<NotifyGetListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<NotifyGetListResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/notifications',
        ...options
    });
};

/**
 * Mark notification threads as read, pinned or unread
 */
export const notifyReadList = <ThrowOnError extends boolean = false>(options?: Options<NotifyReadListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<NotifyReadListResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/notifications',
        ...options
    });
};

/**
 * Check if unread notifications exist
 */
export const notifyNewAvailable = <ThrowOnError extends boolean = false>(options?: Options<NotifyNewAvailableData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<NotifyNewAvailableResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/notifications/new',
        ...options
    });
};

/**
 * Get notification thread by ID
 */
export const notifyGetThread = <ThrowOnError extends boolean = false>(options: Options<NotifyGetThreadData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<NotifyGetThreadResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/notifications/threads/{id}',
        ...options
    });
};

/**
 * Mark notification thread as read by ID
 */
export const notifyReadThread = <ThrowOnError extends boolean = false>(options: Options<NotifyReadThreadData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<NotifyReadThreadResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/notifications/threads/{id}',
        ...options
    });
};

/**
 * @deprecated
 * Create a repository in an organization
 */
export const createOrgRepoDeprecated = <ThrowOnError extends boolean = false>(options: Options<CreateOrgRepoDeprecatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateOrgRepoDeprecatedResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/org/{org}/repos',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get list of organizations
 */
export const orgGetAll = <ThrowOnError extends boolean = false>(options?: Options<OrgGetAllData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<OrgGetAllResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/orgs',
        ...options
    });
};

/**
 * Create an organization
 */
export const orgCreate = <ThrowOnError extends boolean = false>(options: Options<OrgCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OrgCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/orgs',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete an organization
 */
export const orgDelete = <ThrowOnError extends boolean = false>(options: Options<OrgDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/orgs/{org}',
        ...options
    });
};

/**
 * Get an organization
 */
export const orgGet = <ThrowOnError extends boolean = false>(options: Options<OrgGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OrgGetResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/orgs/{org}',
        ...options
    });
};

/**
 * Edit an organization
 */
export const orgEdit = <ThrowOnError extends boolean = false>(options: Options<OrgEditData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<OrgEditResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/orgs/{org}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get an organization's actions runner registration token
 */
export const orgGetRunnerRegistrationToken = <ThrowOnError extends boolean = false>(options: Options<OrgGetRunnerRegistrationTokenData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/orgs/{org}/actions/runners/registration-token',
        ...options
    });
};

/**
 * List an organization's actions secrets
 */
export const orgListActionsSecrets = <ThrowOnError extends boolean = false>(options: Options<OrgListActionsSecretsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OrgListActionsSecretsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/orgs/{org}/actions/secrets',
        ...options
    });
};

/**
 * Delete a secret in an organization
 */
export const deleteOrgSecret = <ThrowOnError extends boolean = false>(options: Options<DeleteOrgSecretData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/orgs/{org}/actions/secrets/{secretname}',
        ...options
    });
};

/**
 * Create or Update a secret value in an organization
 */
export const updateOrgSecret = <ThrowOnError extends boolean = false>(options: Options<UpdateOrgSecretData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/orgs/{org}/actions/secrets/{secretname}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get an org-level variables list
 */
export const getOrgVariablesList = <ThrowOnError extends boolean = false>(options: Options<GetOrgVariablesListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOrgVariablesListResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/orgs/{org}/actions/variables',
        ...options
    });
};

/**
 * Delete an org-level variable
 */
export const deleteOrgVariable = <ThrowOnError extends boolean = false>(options: Options<DeleteOrgVariableData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteOrgVariableResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/orgs/{org}/actions/variables/{variablename}',
        ...options
    });
};

/**
 * Get an org-level variable
 */
export const getOrgVariable = <ThrowOnError extends boolean = false>(options: Options<GetOrgVariableData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOrgVariableResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/orgs/{org}/actions/variables/{variablename}',
        ...options
    });
};

/**
 * Create an org-level variable
 */
export const createOrgVariable = <ThrowOnError extends boolean = false>(options: Options<CreateOrgVariableData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/orgs/{org}/actions/variables/{variablename}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Update an org-level variable
 */
export const updateOrgVariable = <ThrowOnError extends boolean = false>(options: Options<UpdateOrgVariableData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/orgs/{org}/actions/variables/{variablename}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List an organization's activity feeds
 */
export const orgListActivityFeeds = <ThrowOnError extends boolean = false>(options: Options<OrgListActivityFeedsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OrgListActivityFeedsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/orgs/{org}/activities/feeds',
        ...options
    });
};

/**
 * Delete Avatar
 */
export const orgDeleteAvatar = <ThrowOnError extends boolean = false>(options: Options<OrgDeleteAvatarData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/orgs/{org}/avatar',
        ...options
    });
};

/**
 * Update Avatar
 */
export const orgUpdateAvatar = <ThrowOnError extends boolean = false>(options: Options<OrgUpdateAvatarData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/orgs/{org}/avatar',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List users blocked by the organization
 */
export const organizationListBlocks = <ThrowOnError extends boolean = false>(options: Options<OrganizationListBlocksData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OrganizationListBlocksResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/orgs/{org}/blocks',
        ...options
    });
};

/**
 * Unblock a user
 */
export const organizationUnblockUser = <ThrowOnError extends boolean = false>(options: Options<OrganizationUnblockUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/orgs/{org}/blocks/{username}',
        ...options
    });
};

/**
 * Check if a user is blocked by the organization
 */
export const organizationCheckUserBlock = <ThrowOnError extends boolean = false>(options: Options<OrganizationCheckUserBlockData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/orgs/{org}/blocks/{username}',
        ...options
    });
};

/**
 * Block a user
 */
export const organizationBlockUser = <ThrowOnError extends boolean = false>(options: Options<OrganizationBlockUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/orgs/{org}/blocks/{username}',
        ...options
    });
};

/**
 * List an organization's webhooks
 */
export const orgListHooks = <ThrowOnError extends boolean = false>(options: Options<OrgListHooksData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OrgListHooksResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/orgs/{org}/hooks',
        ...options
    });
};

/**
 * Create a hook
 */
export const orgCreateHook = <ThrowOnError extends boolean = false>(options: Options<OrgCreateHookData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OrgCreateHookResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/orgs/{org}/hooks',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a hook
 */
export const orgDeleteHook = <ThrowOnError extends boolean = false>(options: Options<OrgDeleteHookData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/orgs/{org}/hooks/{id}',
        ...options
    });
};

/**
 * Get a hook
 */
export const orgGetHook = <ThrowOnError extends boolean = false>(options: Options<OrgGetHookData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OrgGetHookResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/orgs/{org}/hooks/{id}',
        ...options
    });
};

/**
 * Update a hook
 */
export const orgEditHook = <ThrowOnError extends boolean = false>(options: Options<OrgEditHookData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<OrgEditHookResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/orgs/{org}/hooks/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List an organization's labels
 */
export const orgListLabels = <ThrowOnError extends boolean = false>(options: Options<OrgListLabelsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OrgListLabelsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/orgs/{org}/labels',
        ...options
    });
};

/**
 * Create a label for an organization
 */
export const orgCreateLabel = <ThrowOnError extends boolean = false>(options: Options<OrgCreateLabelData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OrgCreateLabelResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/orgs/{org}/labels',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a label
 */
export const orgDeleteLabel = <ThrowOnError extends boolean = false>(options: Options<OrgDeleteLabelData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/orgs/{org}/labels/{id}',
        ...options
    });
};

/**
 * Get a single label
 */
export const orgGetLabel = <ThrowOnError extends boolean = false>(options: Options<OrgGetLabelData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OrgGetLabelResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/orgs/{org}/labels/{id}',
        ...options
    });
};

/**
 * Update a label
 */
export const orgEditLabel = <ThrowOnError extends boolean = false>(options: Options<OrgEditLabelData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<OrgEditLabelResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/orgs/{org}/labels/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List an organization's members
 */
export const orgListMembers = <ThrowOnError extends boolean = false>(options: Options<OrgListMembersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OrgListMembersResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/orgs/{org}/members',
        ...options
    });
};

/**
 * Remove a member from an organization
 */
export const orgDeleteMember = <ThrowOnError extends boolean = false>(options: Options<OrgDeleteMemberData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/orgs/{org}/members/{username}',
        ...options
    });
};

/**
 * Check if a user is a member of an organization
 */
export const orgIsMember = <ThrowOnError extends boolean = false>(options: Options<OrgIsMemberData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/orgs/{org}/members/{username}',
        ...options
    });
};

/**
 * List an organization's public members
 */
export const orgListPublicMembers = <ThrowOnError extends boolean = false>(options: Options<OrgListPublicMembersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OrgListPublicMembersResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/orgs/{org}/public_members',
        ...options
    });
};

/**
 * Conceal a user's membership
 */
export const orgConcealMember = <ThrowOnError extends boolean = false>(options: Options<OrgConcealMemberData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/orgs/{org}/public_members/{username}',
        ...options
    });
};

/**
 * Check if a user is a public member of an organization
 */
export const orgIsPublicMember = <ThrowOnError extends boolean = false>(options: Options<OrgIsPublicMemberData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/orgs/{org}/public_members/{username}',
        ...options
    });
};

/**
 * Publicize a user's membership
 */
export const orgPublicizeMember = <ThrowOnError extends boolean = false>(options: Options<OrgPublicizeMemberData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/orgs/{org}/public_members/{username}',
        ...options
    });
};

/**
 * Rename an organization
 */
export const renameOrg = <ThrowOnError extends boolean = false>(options: Options<RenameOrgData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/orgs/{org}/rename',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List an organization's repos
 */
export const orgListRepos = <ThrowOnError extends boolean = false>(options: Options<OrgListReposData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OrgListReposResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/orgs/{org}/repos',
        ...options
    });
};

/**
 * Create a repository in an organization
 */
export const createOrgRepo = <ThrowOnError extends boolean = false>(options: Options<CreateOrgRepoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateOrgRepoResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/orgs/{org}/repos',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List an organization's teams
 */
export const orgListTeams = <ThrowOnError extends boolean = false>(options: Options<OrgListTeamsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OrgListTeamsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/orgs/{org}/teams',
        ...options
    });
};

/**
 * Create a team
 */
export const orgCreateTeam = <ThrowOnError extends boolean = false>(options: Options<OrgCreateTeamData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OrgCreateTeamResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/orgs/{org}/teams',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Search for teams within an organization
 */
export const teamSearch = <ThrowOnError extends boolean = false>(options: Options<TeamSearchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TeamSearchResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/orgs/{org}/teams/search',
        ...options
    });
};

/**
 * Gets all packages of an owner
 */
export const listPackages = <ThrowOnError extends boolean = false>(options: Options<ListPackagesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListPackagesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/packages/{owner}',
        ...options
    });
};

/**
 * Link a package to a repository
 */
export const linkPackage = <ThrowOnError extends boolean = false>(options: Options<LinkPackageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/packages/{owner}/{type}/{name}/-/link/{repo_name}',
        ...options
    });
};

/**
 * Unlink a package from a repository
 */
export const unlinkPackage = <ThrowOnError extends boolean = false>(options: Options<UnlinkPackageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/packages/{owner}/{type}/{name}/-/unlink',
        ...options
    });
};

/**
 * Delete a package
 */
export const deletePackage = <ThrowOnError extends boolean = false>(options: Options<DeletePackageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/packages/{owner}/{type}/{name}/{version}',
        ...options
    });
};

/**
 * Gets a package
 */
export const getPackage = <ThrowOnError extends boolean = false>(options: Options<GetPackageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPackageResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/packages/{owner}/{type}/{name}/{version}',
        ...options
    });
};

/**
 * Gets all files of a package
 */
export const listPackageFiles = <ThrowOnError extends boolean = false>(options: Options<ListPackageFilesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListPackageFilesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/packages/{owner}/{type}/{name}/{version}/files',
        ...options
    });
};

/**
 * Search for issues across the repositories that the user has access to
 */
export const issueSearchIssues = <ThrowOnError extends boolean = false>(options?: Options<IssueSearchIssuesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<IssueSearchIssuesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/issues/search',
        ...options
    });
};

/**
 * Migrate a remote git repository
 */
export const repoMigrate = <ThrowOnError extends boolean = false>(options?: Options<RepoMigrateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<RepoMigrateResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/migrate',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Search for repositories
 */
export const repoSearch = <ThrowOnError extends boolean = false>(options?: Options<RepoSearchData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<RepoSearchResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/search',
        ...options
    });
};

/**
 * Delete a repository
 */
export const repoDelete = <ThrowOnError extends boolean = false>(options: Options<RepoDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}',
        ...options
    });
};

/**
 * Get a repository
 */
export const repoGet = <ThrowOnError extends boolean = false>(options: Options<RepoGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RepoGetResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}',
        ...options
    });
};

/**
 * Edit a repository's properties. Only fields that are set will be changed.
 */
export const repoEdit = <ThrowOnError extends boolean = false>(options: Options<RepoEditData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<RepoEditResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Lists all artifacts for a repository
 */
export const getArtifacts = <ThrowOnError extends boolean = false>(options: Options<GetArtifactsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetArtifactsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/actions/artifacts',
        ...options
    });
};

/**
 * Deletes a specific artifact for a workflow run
 */
export const deleteArtifact = <ThrowOnError extends boolean = false>(options: Options<DeleteArtifactData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/actions/artifacts/{artifact_id}',
        ...options
    });
};

/**
 * Gets a specific artifact for a workflow run
 */
export const getArtifact = <ThrowOnError extends boolean = false>(options: Options<GetArtifactData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetArtifactResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/actions/artifacts/{artifact_id}',
        ...options
    });
};

/**
 * Downloads a specific artifact for a workflow run redirects to blob url
 */
export const downloadArtifact = <ThrowOnError extends boolean = false>(options: Options<DownloadArtifactData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/zip',
        ...options
    });
};

/**
 * Get a repository's actions runner registration token
 */
export const repoGetRunnerRegistrationToken = <ThrowOnError extends boolean = false>(options: Options<RepoGetRunnerRegistrationTokenData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/actions/runners/registration-token',
        ...options
    });
};

/**
 * Lists all artifacts for a repository run
 */
export const getArtifactsOfRun = <ThrowOnError extends boolean = false>(options: Options<GetArtifactsOfRunData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetArtifactsOfRunResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/actions/runs/{run}/artifacts',
        ...options
    });
};

/**
 * List an repo's actions secrets
 */
export const repoListActionsSecrets = <ThrowOnError extends boolean = false>(options: Options<RepoListActionsSecretsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RepoListActionsSecretsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/actions/secrets',
        ...options
    });
};

/**
 * Delete a secret in a repository
 */
export const deleteRepoSecret = <ThrowOnError extends boolean = false>(options: Options<DeleteRepoSecretData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/actions/secrets/{secretname}',
        ...options
    });
};

/**
 * Create or Update a secret value in a repository
 */
export const updateRepoSecret = <ThrowOnError extends boolean = false>(options: Options<UpdateRepoSecretData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/actions/secrets/{secretname}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List a repository's action tasks
 */
export const listActionTasks = <ThrowOnError extends boolean = false>(options: Options<ListActionTasksData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListActionTasksResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/actions/tasks',
        ...options
    });
};

/**
 * Get repo-level variables list
 */
export const getRepoVariablesList = <ThrowOnError extends boolean = false>(options: Options<GetRepoVariablesListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetRepoVariablesListResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/actions/variables',
        ...options
    });
};

/**
 * Delete a repo-level variable
 */
export const deleteRepoVariable = <ThrowOnError extends boolean = false>(options: Options<DeleteRepoVariableData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteRepoVariableResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/actions/variables/{variablename}',
        ...options
    });
};

/**
 * Get a repo-level variable
 */
export const getRepoVariable = <ThrowOnError extends boolean = false>(options: Options<GetRepoVariableData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetRepoVariableResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/actions/variables/{variablename}',
        ...options
    });
};

/**
 * Create a repo-level variable
 */
export const createRepoVariable = <ThrowOnError extends boolean = false>(options: Options<CreateRepoVariableData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/actions/variables/{variablename}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Update a repo-level variable
 */
export const updateRepoVariable = <ThrowOnError extends boolean = false>(options: Options<UpdateRepoVariableData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/actions/variables/{variablename}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List repository workflows
 */
export const actionsListRepositoryWorkflows = <ThrowOnError extends boolean = false>(options: Options<ActionsListRepositoryWorkflowsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ActionsListRepositoryWorkflowsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/actions/workflows',
        ...options
    });
};

/**
 * Get a workflow
 */
export const actionsGetWorkflow = <ThrowOnError extends boolean = false>(options: Options<ActionsGetWorkflowData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ActionsGetWorkflowResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/actions/workflows/{workflow_id}',
        ...options
    });
};

/**
 * Disable a workflow
 */
export const actionsDisableWorkflow = <ThrowOnError extends boolean = false>(options: Options<ActionsDisableWorkflowData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable',
        ...options
    });
};

/**
 * Create a workflow dispatch event
 */
export const actionsDispatchWorkflow = <ThrowOnError extends boolean = false>(options: Options<ActionsDispatchWorkflowData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Enable a workflow
 */
export const actionsEnableWorkflow = <ThrowOnError extends boolean = false>(options: Options<ActionsEnableWorkflowData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable',
        ...options
    });
};

/**
 * List a repository's activity feeds
 */
export const repoListActivityFeeds = <ThrowOnError extends boolean = false>(options: Options<RepoListActivityFeedsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RepoListActivityFeedsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/activities/feeds',
        ...options
    });
};

/**
 * Get an archive of a repository
 */
export const repoGetArchive = <ThrowOnError extends boolean = false>(options: Options<RepoGetArchiveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/archive/{archive}',
        ...options
    });
};

/**
 * Return all users that have write access and can be assigned to issues
 */
export const repoGetAssignees = <ThrowOnError extends boolean = false>(options: Options<RepoGetAssigneesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RepoGetAssigneesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/assignees',
        ...options
    });
};

/**
 * Delete avatar
 */
export const repoDeleteAvatar = <ThrowOnError extends boolean = false>(options: Options<RepoDeleteAvatarData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/avatar',
        ...options
    });
};

/**
 * Update avatar
 */
export const repoUpdateAvatar = <ThrowOnError extends boolean = false>(options: Options<RepoUpdateAvatarData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/avatar',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List branch protections for a repository
 */
export const repoListBranchProtection = <ThrowOnError extends boolean = false>(options: Options<RepoListBranchProtectionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RepoListBranchProtectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/branch_protections',
        ...options
    });
};

/**
 * Create a branch protections for a repository
 */
export const repoCreateBranchProtection = <ThrowOnError extends boolean = false>(options: Options<RepoCreateBranchProtectionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RepoCreateBranchProtectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/branch_protections',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Update the priorities of branch protections for a repository.
 */
export const repoUpdateBranchProtectionPriories = <ThrowOnError extends boolean = false>(options: Options<RepoUpdateBranchProtectionPrioriesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/branch_protections/priority',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a specific branch protection for the repository
 */
export const repoDeleteBranchProtection = <ThrowOnError extends boolean = false>(options: Options<RepoDeleteBranchProtectionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/branch_protections/{name}',
        ...options
    });
};

/**
 * Get a specific branch protection for the repository
 */
export const repoGetBranchProtection = <ThrowOnError extends boolean = false>(options: Options<RepoGetBranchProtectionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RepoGetBranchProtectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/branch_protections/{name}',
        ...options
    });
};

/**
 * Edit a branch protections for a repository. Only fields that are set will be changed
 */
export const repoEditBranchProtection = <ThrowOnError extends boolean = false>(options: Options<RepoEditBranchProtectionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<RepoEditBranchProtectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/branch_protections/{name}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List a repository's branches
 */
export const repoListBranches = <ThrowOnError extends boolean = false>(options: Options<RepoListBranchesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RepoListBranchesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/branches',
        ...options
    });
};

/**
 * Create a branch
 */
export const repoCreateBranch = <ThrowOnError extends boolean = false>(options: Options<RepoCreateBranchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RepoCreateBranchResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/branches',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a specific branch from a repository
 */
export const repoDeleteBranch = <ThrowOnError extends boolean = false>(options: Options<RepoDeleteBranchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/branches/{branch}',
        ...options
    });
};

/**
 * Retrieve a specific branch from a repository, including its effective branch protection
 */
export const repoGetBranch = <ThrowOnError extends boolean = false>(options: Options<RepoGetBranchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RepoGetBranchResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/branches/{branch}',
        ...options
    });
};

/**
 * Update a branch
 */
export const repoUpdateBranch = <ThrowOnError extends boolean = false>(options: Options<RepoUpdateBranchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/branches/{branch}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List a repository's collaborators
 */
export const repoListCollaborators = <ThrowOnError extends boolean = false>(options: Options<RepoListCollaboratorsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RepoListCollaboratorsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/collaborators',
        ...options
    });
};

/**
 * Delete a collaborator from a repository
 */
export const repoDeleteCollaborator = <ThrowOnError extends boolean = false>(options: Options<RepoDeleteCollaboratorData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/collaborators/{collaborator}',
        ...options
    });
};

/**
 * Check if a user is a collaborator of a repository
 */
export const repoCheckCollaborator = <ThrowOnError extends boolean = false>(options: Options<RepoCheckCollaboratorData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/collaborators/{collaborator}',
        ...options
    });
};

/**
 * Add or Update a collaborator to a repository
 */
export const repoAddCollaborator = <ThrowOnError extends boolean = false>(options: Options<RepoAddCollaboratorData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/collaborators/{collaborator}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get repository permissions for a user
 */
export const repoGetRepoPermissions = <ThrowOnError extends boolean = false>(options: Options<RepoGetRepoPermissionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RepoGetRepoPermissionsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/collaborators/{collaborator}/permission',
        ...options
    });
};

/**
 * Get a list of all commits from a repository
 */
export const repoGetAllCommits = <ThrowOnError extends boolean = false>(options: Options<RepoGetAllCommitsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RepoGetAllCommitsResponse, RepoGetAllCommitsError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/commits',
        ...options
    });
};

/**
 * Get a commit's combined status, by branch/tag/commit reference
 */
export const repoGetCombinedStatusByRef = <ThrowOnError extends boolean = false>(options: Options<RepoGetCombinedStatusByRefData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RepoGetCombinedStatusByRefResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/commits/{ref}/status',
        ...options
    });
};

/**
 * Get a commit's statuses, by branch/tag/commit reference
 */
export const repoListStatusesByRef = <ThrowOnError extends boolean = false>(options: Options<RepoListStatusesByRefData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RepoListStatusesByRefResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/commits/{ref}/statuses',
        ...options
    });
};

/**
 * Get the merged pull request of the commit
 */
export const repoGetCommitPullRequest = <ThrowOnError extends boolean = false>(options: Options<RepoGetCommitPullRequestData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RepoGetCommitPullRequestResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/commits/{sha}/pull',
        ...options
    });
};

/**
 * Get commit comparison information
 */
export const repoCompareDiff = <ThrowOnError extends boolean = false>(options: Options<RepoCompareDiffData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RepoCompareDiffResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/compare/{basehead}',
        ...options
    });
};

/**
 * Gets the metadata of all the entries of the root dir
 */
export const repoGetContentsList = <ThrowOnError extends boolean = false>(options: Options<RepoGetContentsListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RepoGetContentsListResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/contents',
        ...options
    });
};

/**
 * Modify multiple files in a repository
 */
export const repoChangeFiles = <ThrowOnError extends boolean = false>(options: Options<RepoChangeFilesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RepoChangeFilesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/contents',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a file in a repository
 */
export const repoDeleteFile = <ThrowOnError extends boolean = false>(options: Options<RepoDeleteFileData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RepoDeleteFileResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/contents/{filepath}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Gets the metadata and contents (if a file) of an entry in a repository, or a list of entries if a dir
 */
export const repoGetContents = <ThrowOnError extends boolean = false>(options: Options<RepoGetContentsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RepoGetContentsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/contents/{filepath}',
        ...options
    });
};

/**
 * Create a file in a repository
 */
export const repoCreateFile = <ThrowOnError extends boolean = false>(options: Options<RepoCreateFileData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RepoCreateFileResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/contents/{filepath}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Update a file in a repository
 */
export const repoUpdateFile = <ThrowOnError extends boolean = false>(options: Options<RepoUpdateFileData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<RepoUpdateFileResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/contents/{filepath}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Apply diff patch to repository
 */
export const repoApplyDiffPatch = <ThrowOnError extends boolean = false>(options: Options<RepoApplyDiffPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RepoApplyDiffPatchResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/diffpatch',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get the EditorConfig definitions of a file in a repository
 */
export const repoGetEditorConfig = <ThrowOnError extends boolean = false>(options: Options<RepoGetEditorConfigData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/editorconfig/{filepath}',
        ...options
    });
};

/**
 * List a repository's forks
 */
export const listForks = <ThrowOnError extends boolean = false>(options: Options<ListForksData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListForksResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/forks',
        ...options
    });
};

/**
 * Fork a repository
 */
export const createFork = <ThrowOnError extends boolean = false>(options: Options<CreateForkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateForkResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/forks',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Gets the blob of a repository.
 */
export const getBlob = <ThrowOnError extends boolean = false>(options: Options<GetBlobData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetBlobResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/git/blobs/{sha}',
        ...options
    });
};

/**
 * Get a single commit from a repository
 */
export const repoGetSingleCommit = <ThrowOnError extends boolean = false>(options: Options<RepoGetSingleCommitData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RepoGetSingleCommitResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/git/commits/{sha}',
        ...options
    });
};

/**
 * Get a commit's diff or patch
 */
export const repoDownloadCommitDiffOrPatch = <ThrowOnError extends boolean = false>(options: Options<RepoDownloadCommitDiffOrPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RepoDownloadCommitDiffOrPatchResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/git/commits/{sha}.{diffType}',
        ...options
    });
};

/**
 * Get a note corresponding to a single commit from a repository
 */
export const repoGetNote = <ThrowOnError extends boolean = false>(options: Options<RepoGetNoteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RepoGetNoteResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/git/notes/{sha}',
        ...options
    });
};

/**
 * Get specified ref or filtered repository's refs
 */
export const repoListAllGitRefs = <ThrowOnError extends boolean = false>(options: Options<RepoListAllGitRefsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RepoListAllGitRefsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/git/refs',
        ...options
    });
};

/**
 * Get specified ref or filtered repository's refs
 */
export const repoListGitRefs = <ThrowOnError extends boolean = false>(options: Options<RepoListGitRefsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RepoListGitRefsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/git/refs/{ref}',
        ...options
    });
};

/**
 * Gets the tag object of an annotated tag (not lightweight tags)
 */
export const getAnnotatedTag = <ThrowOnError extends boolean = false>(options: Options<GetAnnotatedTagData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAnnotatedTagResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/git/tags/{sha}',
        ...options
    });
};

/**
 * Gets the tree of a repository.
 */
export const getTree = <ThrowOnError extends boolean = false>(options: Options<GetTreeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTreeResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/git/trees/{sha}',
        ...options
    });
};

/**
 * List the hooks in a repository
 */
export const repoListHooks = <ThrowOnError extends boolean = false>(options: Options<RepoListHooksData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RepoListHooksResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/hooks',
        ...options
    });
};

/**
 * Create a hook
 */
export const repoCreateHook = <ThrowOnError extends boolean = false>(options: Options<RepoCreateHookData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RepoCreateHookResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/hooks',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List the Git hooks in a repository
 */
export const repoListGitHooks = <ThrowOnError extends boolean = false>(options: Options<RepoListGitHooksData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RepoListGitHooksResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/hooks/git',
        ...options
    });
};

/**
 * Delete a Git hook in a repository
 */
export const repoDeleteGitHook = <ThrowOnError extends boolean = false>(options: Options<RepoDeleteGitHookData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/hooks/git/{id}',
        ...options
    });
};

/**
 * Get a Git hook
 */
export const repoGetGitHook = <ThrowOnError extends boolean = false>(options: Options<RepoGetGitHookData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RepoGetGitHookResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/hooks/git/{id}',
        ...options
    });
};

/**
 * Edit a Git hook in a repository
 */
export const repoEditGitHook = <ThrowOnError extends boolean = false>(options: Options<RepoEditGitHookData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<RepoEditGitHookResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/hooks/git/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a hook in a repository
 */
export const repoDeleteHook = <ThrowOnError extends boolean = false>(options: Options<RepoDeleteHookData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/hooks/{id}',
        ...options
    });
};

/**
 * Get a hook
 */
export const repoGetHook = <ThrowOnError extends boolean = false>(options: Options<RepoGetHookData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RepoGetHookResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/hooks/{id}',
        ...options
    });
};

/**
 * Edit a hook in a repository
 */
export const repoEditHook = <ThrowOnError extends boolean = false>(options: Options<RepoEditHookData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<RepoEditHookResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/hooks/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Test a push webhook
 */
export const repoTestHook = <ThrowOnError extends boolean = false>(options: Options<RepoTestHookData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/hooks/{id}/tests',
        ...options
    });
};

/**
 * Returns the issue config for a repo
 */
export const repoGetIssueConfig = <ThrowOnError extends boolean = false>(options: Options<RepoGetIssueConfigData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RepoGetIssueConfigResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/issue_config',
        ...options
    });
};

/**
 * Returns the validation information for a issue config
 */
export const repoValidateIssueConfig = <ThrowOnError extends boolean = false>(options: Options<RepoValidateIssueConfigData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RepoValidateIssueConfigResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/issue_config/validate',
        ...options
    });
};

/**
 * Get available issue templates for a repository
 */
export const repoGetIssueTemplates = <ThrowOnError extends boolean = false>(options: Options<RepoGetIssueTemplatesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RepoGetIssueTemplatesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/issue_templates',
        ...options
    });
};

/**
 * List a repository's issues
 */
export const issueListIssues = <ThrowOnError extends boolean = false>(options: Options<IssueListIssuesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<IssueListIssuesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/issues',
        ...options
    });
};

/**
 * Create an issue. If using deadline only the date will be taken into account, and time of day ignored.
 */
export const issueCreateIssue = <ThrowOnError extends boolean = false>(options: Options<IssueCreateIssueData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<IssueCreateIssueResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/issues',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List all comments in a repository
 */
export const issueGetRepoComments = <ThrowOnError extends boolean = false>(options: Options<IssueGetRepoCommentsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<IssueGetRepoCommentsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/issues/comments',
        ...options
    });
};

/**
 * Delete a comment
 */
export const issueDeleteComment = <ThrowOnError extends boolean = false>(options: Options<IssueDeleteCommentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/issues/comments/{id}',
        ...options
    });
};

/**
 * Get a comment
 */
export const issueGetComment = <ThrowOnError extends boolean = false>(options: Options<IssueGetCommentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<IssueGetCommentResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/issues/comments/{id}',
        ...options
    });
};

/**
 * Edit a comment
 */
export const issueEditComment = <ThrowOnError extends boolean = false>(options: Options<IssueEditCommentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<IssueEditCommentResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/issues/comments/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List comment's attachments
 */
export const issueListIssueCommentAttachments = <ThrowOnError extends boolean = false>(options: Options<IssueListIssueCommentAttachmentsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<IssueListIssueCommentAttachmentsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/issues/comments/{id}/assets',
        ...options
    });
};

/**
 * Create a comment attachment
 */
export const issueCreateIssueCommentAttachment = <ThrowOnError extends boolean = false>(options: Options<IssueCreateIssueCommentAttachmentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<IssueCreateIssueCommentAttachmentResponse, unknown, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/issues/comments/{id}/assets',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * Delete a comment attachment
 */
export const issueDeleteIssueCommentAttachment = <ThrowOnError extends boolean = false>(options: Options<IssueDeleteIssueCommentAttachmentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/issues/comments/{id}/assets/{attachment_id}',
        ...options
    });
};

/**
 * Get a comment attachment
 */
export const issueGetIssueCommentAttachment = <ThrowOnError extends boolean = false>(options: Options<IssueGetIssueCommentAttachmentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<IssueGetIssueCommentAttachmentResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/issues/comments/{id}/assets/{attachment_id}',
        ...options
    });
};

/**
 * Edit a comment attachment
 */
export const issueEditIssueCommentAttachment = <ThrowOnError extends boolean = false>(options: Options<IssueEditIssueCommentAttachmentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<IssueEditIssueCommentAttachmentResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/issues/comments/{id}/assets/{attachment_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Remove a reaction from a comment of an issue
 */
export const issueDeleteCommentReaction = <ThrowOnError extends boolean = false>(options: Options<IssueDeleteCommentReactionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/issues/comments/{id}/reactions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get a list of reactions from a comment of an issue
 */
export const issueGetCommentReactions = <ThrowOnError extends boolean = false>(options: Options<IssueGetCommentReactionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<IssueGetCommentReactionsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/issues/comments/{id}/reactions',
        ...options
    });
};

/**
 * Add a reaction to a comment of an issue
 */
export const issuePostCommentReaction = <ThrowOnError extends boolean = false>(options: Options<IssuePostCommentReactionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<IssuePostCommentReactionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/issues/comments/{id}/reactions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List a repo's pinned issues
 */
export const repoListPinnedIssues = <ThrowOnError extends boolean = false>(options: Options<RepoListPinnedIssuesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RepoListPinnedIssuesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/issues/pinned',
        ...options
    });
};

/**
 * Delete an issue
 */
export const issueDelete = <ThrowOnError extends boolean = false>(options: Options<IssueDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/issues/{index}',
        ...options
    });
};

/**
 * Get an issue
 */
export const issueGetIssue = <ThrowOnError extends boolean = false>(options: Options<IssueGetIssueData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<IssueGetIssueResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/issues/{index}',
        ...options
    });
};

/**
 * Edit an issue. If using deadline only the date will be taken into account, and time of day ignored.
 */
export const issueEditIssue = <ThrowOnError extends boolean = false>(options: Options<IssueEditIssueData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<IssueEditIssueResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/issues/{index}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List issue's attachments
 */
export const issueListIssueAttachments = <ThrowOnError extends boolean = false>(options: Options<IssueListIssueAttachmentsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<IssueListIssueAttachmentsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/issues/{index}/assets',
        ...options
    });
};

/**
 * Create an issue attachment
 */
export const issueCreateIssueAttachment = <ThrowOnError extends boolean = false>(options: Options<IssueCreateIssueAttachmentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<IssueCreateIssueAttachmentResponse, unknown, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/issues/{index}/assets',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * Delete an issue attachment
 */
export const issueDeleteIssueAttachment = <ThrowOnError extends boolean = false>(options: Options<IssueDeleteIssueAttachmentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/issues/{index}/assets/{attachment_id}',
        ...options
    });
};

/**
 * Get an issue attachment
 */
export const issueGetIssueAttachment = <ThrowOnError extends boolean = false>(options: Options<IssueGetIssueAttachmentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<IssueGetIssueAttachmentResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/issues/{index}/assets/{attachment_id}',
        ...options
    });
};

/**
 * Edit an issue attachment
 */
export const issueEditIssueAttachment = <ThrowOnError extends boolean = false>(options: Options<IssueEditIssueAttachmentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<IssueEditIssueAttachmentResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/issues/{index}/assets/{attachment_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Unblock the issue given in the body by the issue in path
 */
export const issueRemoveIssueBlocking = <ThrowOnError extends boolean = false>(options: Options<IssueRemoveIssueBlockingData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<IssueRemoveIssueBlockingResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/issues/{index}/blocks',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List issues that are blocked by this issue
 */
export const issueListBlocks = <ThrowOnError extends boolean = false>(options: Options<IssueListBlocksData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<IssueListBlocksResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/issues/{index}/blocks',
        ...options
    });
};

/**
 * Block the issue given in the body by the issue in path
 */
export const issueCreateIssueBlocking = <ThrowOnError extends boolean = false>(options: Options<IssueCreateIssueBlockingData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<IssueCreateIssueBlockingResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/issues/{index}/blocks',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List all comments on an issue
 */
export const issueGetComments = <ThrowOnError extends boolean = false>(options: Options<IssueGetCommentsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<IssueGetCommentsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/issues/{index}/comments',
        ...options
    });
};

/**
 * Add a comment to an issue
 */
export const issueCreateComment = <ThrowOnError extends boolean = false>(options: Options<IssueCreateCommentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<IssueCreateCommentResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/issues/{index}/comments',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * @deprecated
 * Delete a comment
 */
export const issueDeleteCommentDeprecated = <ThrowOnError extends boolean = false>(options: Options<IssueDeleteCommentDeprecatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/issues/{index}/comments/{id}',
        ...options
    });
};

/**
 * @deprecated
 * Edit a comment
 */
export const issueEditCommentDeprecated = <ThrowOnError extends boolean = false>(options: Options<IssueEditCommentDeprecatedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<IssueEditCommentDeprecatedResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/issues/{index}/comments/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Set an issue deadline. If set to null, the deadline is deleted. If using deadline only the date will be taken into account, and time of day ignored.
 */
export const issueEditIssueDeadline = <ThrowOnError extends boolean = false>(options: Options<IssueEditIssueDeadlineData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<IssueEditIssueDeadlineResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/issues/{index}/deadline',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Remove an issue dependency
 */
export const issueRemoveIssueDependencies = <ThrowOnError extends boolean = false>(options: Options<IssueRemoveIssueDependenciesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<IssueRemoveIssueDependenciesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/issues/{index}/dependencies',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List an issue's dependencies, i.e all issues that block this issue.
 */
export const issueListIssueDependencies = <ThrowOnError extends boolean = false>(options: Options<IssueListIssueDependenciesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<IssueListIssueDependenciesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/issues/{index}/dependencies',
        ...options
    });
};

/**
 * Make the issue in the url depend on the issue in the form.
 */
export const issueCreateIssueDependencies = <ThrowOnError extends boolean = false>(options: Options<IssueCreateIssueDependenciesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<IssueCreateIssueDependenciesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/issues/{index}/dependencies',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Remove all labels from an issue
 */
export const issueClearLabels = <ThrowOnError extends boolean = false>(options: Options<IssueClearLabelsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/issues/{index}/labels',
        ...options
    });
};

/**
 * Get an issue's labels
 */
export const issueGetLabels = <ThrowOnError extends boolean = false>(options: Options<IssueGetLabelsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<IssueGetLabelsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/issues/{index}/labels',
        ...options
    });
};

/**
 * Add a label to an issue
 */
export const issueAddLabel = <ThrowOnError extends boolean = false>(options: Options<IssueAddLabelData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<IssueAddLabelResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/issues/{index}/labels',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Replace an issue's labels
 */
export const issueReplaceLabels = <ThrowOnError extends boolean = false>(options: Options<IssueReplaceLabelsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<IssueReplaceLabelsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/issues/{index}/labels',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Remove a label from an issue
 */
export const issueRemoveLabel = <ThrowOnError extends boolean = false>(options: Options<IssueRemoveLabelData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/issues/{index}/labels/{id}',
        ...options
    });
};

/**
 * Unpin an Issue
 */
export const unpinIssue = <ThrowOnError extends boolean = false>(options: Options<UnpinIssueData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/issues/{index}/pin',
        ...options
    });
};

/**
 * Pin an Issue
 */
export const pinIssue = <ThrowOnError extends boolean = false>(options: Options<PinIssueData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/issues/{index}/pin',
        ...options
    });
};

/**
 * Moves the Pin to the given Position
 */
export const moveIssuePin = <ThrowOnError extends boolean = false>(options: Options<MoveIssuePinData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/issues/{index}/pin/{position}',
        ...options
    });
};

/**
 * Remove a reaction from an issue
 */
export const issueDeleteIssueReaction = <ThrowOnError extends boolean = false>(options: Options<IssueDeleteIssueReactionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/issues/{index}/reactions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get a list reactions of an issue
 */
export const issueGetIssueReactions = <ThrowOnError extends boolean = false>(options: Options<IssueGetIssueReactionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<IssueGetIssueReactionsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/issues/{index}/reactions',
        ...options
    });
};

/**
 * Add a reaction to an issue
 */
export const issuePostIssueReaction = <ThrowOnError extends boolean = false>(options: Options<IssuePostIssueReactionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<IssuePostIssueReactionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/issues/{index}/reactions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete an issue's existing stopwatch.
 */
export const issueDeleteStopWatch = <ThrowOnError extends boolean = false>(options: Options<IssueDeleteStopWatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/issues/{index}/stopwatch/delete',
        ...options
    });
};

/**
 * Start stopwatch on an issue.
 */
export const issueStartStopWatch = <ThrowOnError extends boolean = false>(options: Options<IssueStartStopWatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/issues/{index}/stopwatch/start',
        ...options
    });
};

/**
 * Stop an issue's existing stopwatch.
 */
export const issueStopStopWatch = <ThrowOnError extends boolean = false>(options: Options<IssueStopStopWatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/issues/{index}/stopwatch/stop',
        ...options
    });
};

/**
 * Get users who subscribed on an issue.
 */
export const issueSubscriptions = <ThrowOnError extends boolean = false>(options: Options<IssueSubscriptionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<IssueSubscriptionsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/issues/{index}/subscriptions',
        ...options
    });
};

/**
 * Check if user is subscribed to an issue
 */
export const issueCheckSubscription = <ThrowOnError extends boolean = false>(options: Options<IssueCheckSubscriptionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<IssueCheckSubscriptionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/issues/{index}/subscriptions/check',
        ...options
    });
};

/**
 * Unsubscribe user from issue
 */
export const issueDeleteSubscription = <ThrowOnError extends boolean = false>(options: Options<IssueDeleteSubscriptionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/issues/{index}/subscriptions/{user}',
        ...options
    });
};

/**
 * Subscribe user to issue
 */
export const issueAddSubscription = <ThrowOnError extends boolean = false>(options: Options<IssueAddSubscriptionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/issues/{index}/subscriptions/{user}',
        ...options
    });
};

/**
 * List all comments and events on an issue
 */
export const issueGetCommentsAndTimeline = <ThrowOnError extends boolean = false>(options: Options<IssueGetCommentsAndTimelineData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<IssueGetCommentsAndTimelineResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/issues/{index}/timeline',
        ...options
    });
};

/**
 * Reset a tracked time of an issue
 */
export const issueResetTime = <ThrowOnError extends boolean = false>(options: Options<IssueResetTimeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/issues/{index}/times',
        ...options
    });
};

/**
 * List an issue's tracked times
 */
export const issueTrackedTimes = <ThrowOnError extends boolean = false>(options: Options<IssueTrackedTimesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<IssueTrackedTimesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/issues/{index}/times',
        ...options
    });
};

/**
 * Add tracked time to a issue
 */
export const issueAddTime = <ThrowOnError extends boolean = false>(options: Options<IssueAddTimeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<IssueAddTimeResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/issues/{index}/times',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete specific tracked time
 */
export const issueDeleteTime = <ThrowOnError extends boolean = false>(options: Options<IssueDeleteTimeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/issues/{index}/times/{id}',
        ...options
    });
};

/**
 * List a repository's keys
 */
export const repoListKeys = <ThrowOnError extends boolean = false>(options: Options<RepoListKeysData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RepoListKeysResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/keys',
        ...options
    });
};

/**
 * Add a key to a repository
 */
export const repoCreateKey = <ThrowOnError extends boolean = false>(options: Options<RepoCreateKeyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RepoCreateKeyResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/keys',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a key from a repository
 */
export const repoDeleteKey = <ThrowOnError extends boolean = false>(options: Options<RepoDeleteKeyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/keys/{id}',
        ...options
    });
};

/**
 * Get a repository's key by id
 */
export const repoGetKey = <ThrowOnError extends boolean = false>(options: Options<RepoGetKeyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RepoGetKeyResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/keys/{id}',
        ...options
    });
};

/**
 * Get all of a repository's labels
 */
export const issueListLabels = <ThrowOnError extends boolean = false>(options: Options<IssueListLabelsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<IssueListLabelsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/labels',
        ...options
    });
};

/**
 * Create a label
 */
export const issueCreateLabel = <ThrowOnError extends boolean = false>(options: Options<IssueCreateLabelData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<IssueCreateLabelResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/labels',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a label
 */
export const issueDeleteLabel = <ThrowOnError extends boolean = false>(options: Options<IssueDeleteLabelData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/labels/{id}',
        ...options
    });
};

/**
 * Get a single label
 */
export const issueGetLabel = <ThrowOnError extends boolean = false>(options: Options<IssueGetLabelData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<IssueGetLabelResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/labels/{id}',
        ...options
    });
};

/**
 * Update a label
 */
export const issueEditLabel = <ThrowOnError extends boolean = false>(options: Options<IssueEditLabelData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<IssueEditLabelResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/labels/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get languages and number of bytes of code written
 */
export const repoGetLanguages = <ThrowOnError extends boolean = false>(options: Options<RepoGetLanguagesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RepoGetLanguagesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/languages',
        ...options
    });
};

/**
 * Get repo licenses
 */
export const repoGetLicenses = <ThrowOnError extends boolean = false>(options: Options<RepoGetLicensesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RepoGetLicensesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/licenses',
        ...options
    });
};

/**
 * Get a file or it's LFS object from a repository
 */
export const repoGetRawFileOrLfs = <ThrowOnError extends boolean = false>(options: Options<RepoGetRawFileOrLfsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, RepoGetRawFileOrLfsError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/media/{filepath}',
        ...options
    });
};

/**
 * Merge a branch from upstream
 */
export const repoMergeUpstream = <ThrowOnError extends boolean = false>(options: Options<RepoMergeUpstreamData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RepoMergeUpstreamResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/merge-upstream',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get all of a repository's opened milestones
 */
export const issueGetMilestonesList = <ThrowOnError extends boolean = false>(options: Options<IssueGetMilestonesListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<IssueGetMilestonesListResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/milestones',
        ...options
    });
};

/**
 * Create a milestone
 */
export const issueCreateMilestone = <ThrowOnError extends boolean = false>(options: Options<IssueCreateMilestoneData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<IssueCreateMilestoneResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/milestones',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a milestone
 */
export const issueDeleteMilestone = <ThrowOnError extends boolean = false>(options: Options<IssueDeleteMilestoneData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/milestones/{id}',
        ...options
    });
};

/**
 * Get a milestone
 */
export const issueGetMilestone = <ThrowOnError extends boolean = false>(options: Options<IssueGetMilestoneData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<IssueGetMilestoneResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/milestones/{id}',
        ...options
    });
};

/**
 * Update a milestone
 */
export const issueEditMilestone = <ThrowOnError extends boolean = false>(options: Options<IssueEditMilestoneData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<IssueEditMilestoneResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/milestones/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Sync a mirrored repository
 */
export const repoMirrorSync = <ThrowOnError extends boolean = false>(options: Options<RepoMirrorSyncData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/mirror-sync',
        ...options
    });
};

/**
 * Returns if new Issue Pins are allowed
 */
export const repoNewPinAllowed = <ThrowOnError extends boolean = false>(options: Options<RepoNewPinAllowedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RepoNewPinAllowedResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/new_pin_allowed',
        ...options
    });
};

/**
 * List users's notification threads on a specific repo
 */
export const notifyGetRepoList = <ThrowOnError extends boolean = false>(options: Options<NotifyGetRepoListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<NotifyGetRepoListResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/notifications',
        ...options
    });
};

/**
 * Mark notification threads as read, pinned or unread on a specific repo
 */
export const notifyReadRepoList = <ThrowOnError extends boolean = false>(options: Options<NotifyReadRepoListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<NotifyReadRepoListResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/notifications',
        ...options
    });
};

/**
 * List a repo's pull requests
 */
export const repoListPullRequests = <ThrowOnError extends boolean = false>(options: Options<RepoListPullRequestsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RepoListPullRequestsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/pulls',
        ...options
    });
};

/**
 * Create a pull request
 */
export const repoCreatePullRequest = <ThrowOnError extends boolean = false>(options: Options<RepoCreatePullRequestData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RepoCreatePullRequestResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/pulls',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List a repo's pinned pull requests
 */
export const repoListPinnedPullRequests = <ThrowOnError extends boolean = false>(options: Options<RepoListPinnedPullRequestsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RepoListPinnedPullRequestsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/pulls/pinned',
        ...options
    });
};

/**
 * Get a pull request by base and head
 */
export const repoGetPullRequestByBaseHead = <ThrowOnError extends boolean = false>(options: Options<RepoGetPullRequestByBaseHeadData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RepoGetPullRequestByBaseHeadResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/pulls/{base}/{head}',
        ...options
    });
};

/**
 * Get a pull request
 */
export const repoGetPullRequest = <ThrowOnError extends boolean = false>(options: Options<RepoGetPullRequestData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RepoGetPullRequestResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/pulls/{index}',
        ...options
    });
};

/**
 * Update a pull request. If using deadline only the date will be taken into account, and time of day ignored.
 */
export const repoEditPullRequest = <ThrowOnError extends boolean = false>(options: Options<RepoEditPullRequestData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<RepoEditPullRequestResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/pulls/{index}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get a pull request diff or patch
 */
export const repoDownloadPullDiffOrPatch = <ThrowOnError extends boolean = false>(options: Options<RepoDownloadPullDiffOrPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RepoDownloadPullDiffOrPatchResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/pulls/{index}.{diffType}',
        ...options
    });
};

/**
 * Get commits for a pull request
 */
export const repoGetPullRequestCommits = <ThrowOnError extends boolean = false>(options: Options<RepoGetPullRequestCommitsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RepoGetPullRequestCommitsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/pulls/{index}/commits',
        ...options
    });
};

/**
 * Get changed files for a pull request
 */
export const repoGetPullRequestFiles = <ThrowOnError extends boolean = false>(options: Options<RepoGetPullRequestFilesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RepoGetPullRequestFilesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/pulls/{index}/files',
        ...options
    });
};

/**
 * Cancel the scheduled auto merge for the given pull request
 */
export const repoCancelScheduledAutoMerge = <ThrowOnError extends boolean = false>(options: Options<RepoCancelScheduledAutoMergeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/pulls/{index}/merge',
        ...options
    });
};

/**
 * Check if a pull request has been merged
 */
export const repoPullRequestIsMerged = <ThrowOnError extends boolean = false>(options: Options<RepoPullRequestIsMergedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/pulls/{index}/merge',
        ...options
    });
};

/**
 * Merge a pull request
 */
export const repoMergePullRequest = <ThrowOnError extends boolean = false>(options: Options<RepoMergePullRequestData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/pulls/{index}/merge',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * cancel review requests for a pull request
 */
export const repoDeletePullReviewRequests = <ThrowOnError extends boolean = false>(options: Options<RepoDeletePullReviewRequestsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/pulls/{index}/requested_reviewers',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * create review requests for a pull request
 */
export const repoCreatePullReviewRequests = <ThrowOnError extends boolean = false>(options: Options<RepoCreatePullReviewRequestsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RepoCreatePullReviewRequestsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/pulls/{index}/requested_reviewers',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List all reviews for a pull request
 */
export const repoListPullReviews = <ThrowOnError extends boolean = false>(options: Options<RepoListPullReviewsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RepoListPullReviewsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/pulls/{index}/reviews',
        ...options
    });
};

/**
 * Create a review to an pull request
 */
export const repoCreatePullReview = <ThrowOnError extends boolean = false>(options: Options<RepoCreatePullReviewData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RepoCreatePullReviewResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/pulls/{index}/reviews',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a specific review from a pull request
 */
export const repoDeletePullReview = <ThrowOnError extends boolean = false>(options: Options<RepoDeletePullReviewData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/pulls/{index}/reviews/{id}',
        ...options
    });
};

/**
 * Get a specific review for a pull request
 */
export const repoGetPullReview = <ThrowOnError extends boolean = false>(options: Options<RepoGetPullReviewData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RepoGetPullReviewResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/pulls/{index}/reviews/{id}',
        ...options
    });
};

/**
 * Submit a pending review to an pull request
 */
export const repoSubmitPullReview = <ThrowOnError extends boolean = false>(options: Options<RepoSubmitPullReviewData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RepoSubmitPullReviewResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/pulls/{index}/reviews/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get a specific review for a pull request
 */
export const repoGetPullReviewComments = <ThrowOnError extends boolean = false>(options: Options<RepoGetPullReviewCommentsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RepoGetPullReviewCommentsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/pulls/{index}/reviews/{id}/comments',
        ...options
    });
};

/**
 * Dismiss a review for a pull request
 */
export const repoDismissPullReview = <ThrowOnError extends boolean = false>(options: Options<RepoDismissPullReviewData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RepoDismissPullReviewResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/pulls/{index}/reviews/{id}/dismissals',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Cancel to dismiss a review for a pull request
 */
export const repoUnDismissPullReview = <ThrowOnError extends boolean = false>(options: Options<RepoUnDismissPullReviewData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RepoUnDismissPullReviewResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/pulls/{index}/reviews/{id}/undismissals',
        ...options
    });
};

/**
 * Merge PR's baseBranch into headBranch
 */
export const repoUpdatePullRequest = <ThrowOnError extends boolean = false>(options: Options<RepoUpdatePullRequestData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/pulls/{index}/update',
        ...options
    });
};

/**
 * Get all push mirrors of the repository
 */
export const repoListPushMirrors = <ThrowOnError extends boolean = false>(options: Options<RepoListPushMirrorsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RepoListPushMirrorsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/push_mirrors',
        ...options
    });
};

/**
 * add a push mirror to the repository
 */
export const repoAddPushMirror = <ThrowOnError extends boolean = false>(options: Options<RepoAddPushMirrorData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RepoAddPushMirrorResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/push_mirrors',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Sync all push mirrored repository
 */
export const repoPushMirrorSync = <ThrowOnError extends boolean = false>(options: Options<RepoPushMirrorSyncData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/push_mirrors-sync',
        ...options
    });
};

/**
 * deletes a push mirror from a repository by remoteName
 */
export const repoDeletePushMirror = <ThrowOnError extends boolean = false>(options: Options<RepoDeletePushMirrorData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/push_mirrors/{name}',
        ...options
    });
};

/**
 * Get push mirror of the repository by remoteName
 */
export const repoGetPushMirrorByRemoteName = <ThrowOnError extends boolean = false>(options: Options<RepoGetPushMirrorByRemoteNameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RepoGetPushMirrorByRemoteNameResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/push_mirrors/{name}',
        ...options
    });
};

/**
 * Get a file from a repository
 */
export const repoGetRawFile = <ThrowOnError extends boolean = false>(options: Options<RepoGetRawFileData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, RepoGetRawFileError, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/raw/{filepath}',
        ...options
    });
};

/**
 * List a repo's releases
 */
export const repoListReleases = <ThrowOnError extends boolean = false>(options: Options<RepoListReleasesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RepoListReleasesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/releases',
        ...options
    });
};

/**
 * Create a release
 */
export const repoCreateRelease = <ThrowOnError extends boolean = false>(options: Options<RepoCreateReleaseData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RepoCreateReleaseResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/releases',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Gets the most recent non-prerelease, non-draft release of a repository, sorted by created_at
 */
export const repoGetLatestRelease = <ThrowOnError extends boolean = false>(options: Options<RepoGetLatestReleaseData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RepoGetLatestReleaseResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/releases/latest',
        ...options
    });
};

/**
 * Delete a release by tag name
 */
export const repoDeleteReleaseByTag = <ThrowOnError extends boolean = false>(options: Options<RepoDeleteReleaseByTagData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/releases/tags/{tag}',
        ...options
    });
};

/**
 * Get a release by tag name
 */
export const repoGetReleaseByTag = <ThrowOnError extends boolean = false>(options: Options<RepoGetReleaseByTagData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RepoGetReleaseByTagResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/releases/tags/{tag}',
        ...options
    });
};

/**
 * Delete a release
 */
export const repoDeleteRelease = <ThrowOnError extends boolean = false>(options: Options<RepoDeleteReleaseData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/releases/{id}',
        ...options
    });
};

/**
 * Get a release
 */
export const repoGetRelease = <ThrowOnError extends boolean = false>(options: Options<RepoGetReleaseData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RepoGetReleaseResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/releases/{id}',
        ...options
    });
};

/**
 * Update a release
 */
export const repoEditRelease = <ThrowOnError extends boolean = false>(options: Options<RepoEditReleaseData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<RepoEditReleaseResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/releases/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List release's attachments
 */
export const repoListReleaseAttachments = <ThrowOnError extends boolean = false>(options: Options<RepoListReleaseAttachmentsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RepoListReleaseAttachmentsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/releases/{id}/assets',
        ...options
    });
};

/**
 * Create a release attachment
 */
export const repoCreateReleaseAttachment = <ThrowOnError extends boolean = false>(options: Options<RepoCreateReleaseAttachmentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RepoCreateReleaseAttachmentResponse, unknown, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/releases/{id}/assets',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * Delete a release attachment
 */
export const repoDeleteReleaseAttachment = <ThrowOnError extends boolean = false>(options: Options<RepoDeleteReleaseAttachmentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/releases/{id}/assets/{attachment_id}',
        ...options
    });
};

/**
 * Get a release attachment
 */
export const repoGetReleaseAttachment = <ThrowOnError extends boolean = false>(options: Options<RepoGetReleaseAttachmentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RepoGetReleaseAttachmentResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/releases/{id}/assets/{attachment_id}',
        ...options
    });
};

/**
 * Edit a release attachment
 */
export const repoEditReleaseAttachment = <ThrowOnError extends boolean = false>(options: Options<RepoEditReleaseAttachmentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<RepoEditReleaseAttachmentResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/releases/{id}/assets/{attachment_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Return all users that can be requested to review in this repo
 */
export const repoGetReviewers = <ThrowOnError extends boolean = false>(options: Options<RepoGetReviewersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RepoGetReviewersResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/reviewers',
        ...options
    });
};

/**
 * Get signing-key.gpg for given repository
 */
export const repoSigningKey = <ThrowOnError extends boolean = false>(options: Options<RepoSigningKeyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RepoSigningKeyResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/signing-key.gpg',
        ...options
    });
};

/**
 * List a repo's stargazers
 */
export const repoListStargazers = <ThrowOnError extends boolean = false>(options: Options<RepoListStargazersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RepoListStargazersResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/stargazers',
        ...options
    });
};

/**
 * Get a commit's statuses
 */
export const repoListStatuses = <ThrowOnError extends boolean = false>(options: Options<RepoListStatusesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RepoListStatusesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/statuses/{sha}',
        ...options
    });
};

/**
 * Create a commit status
 */
export const repoCreateStatus = <ThrowOnError extends boolean = false>(options: Options<RepoCreateStatusData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RepoCreateStatusResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/statuses/{sha}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List a repo's watchers
 */
export const repoListSubscribers = <ThrowOnError extends boolean = false>(options: Options<RepoListSubscribersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RepoListSubscribersResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/subscribers',
        ...options
    });
};

/**
 * Unwatch a repo
 */
export const userCurrentDeleteSubscription = <ThrowOnError extends boolean = false>(options: Options<UserCurrentDeleteSubscriptionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/subscription',
        ...options
    });
};

/**
 * Check if the current user is watching a repo
 */
export const userCurrentCheckSubscription = <ThrowOnError extends boolean = false>(options: Options<UserCurrentCheckSubscriptionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UserCurrentCheckSubscriptionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/subscription',
        ...options
    });
};

/**
 * Watch a repo
 */
export const userCurrentPutSubscription = <ThrowOnError extends boolean = false>(options: Options<UserCurrentPutSubscriptionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UserCurrentPutSubscriptionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/subscription',
        ...options
    });
};

/**
 * List tag protections for a repository
 */
export const repoListTagProtection = <ThrowOnError extends boolean = false>(options: Options<RepoListTagProtectionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RepoListTagProtectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/tag_protections',
        ...options
    });
};

/**
 * Create a tag protections for a repository
 */
export const repoCreateTagProtection = <ThrowOnError extends boolean = false>(options: Options<RepoCreateTagProtectionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RepoCreateTagProtectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/tag_protections',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a specific tag protection for the repository
 */
export const repoDeleteTagProtection = <ThrowOnError extends boolean = false>(options: Options<RepoDeleteTagProtectionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/tag_protections/{id}',
        ...options
    });
};

/**
 * Get a specific tag protection for the repository
 */
export const repoGetTagProtection = <ThrowOnError extends boolean = false>(options: Options<RepoGetTagProtectionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RepoGetTagProtectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/tag_protections/{id}',
        ...options
    });
};

/**
 * Edit a tag protections for a repository. Only fields that are set will be changed
 */
export const repoEditTagProtection = <ThrowOnError extends boolean = false>(options: Options<RepoEditTagProtectionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<RepoEditTagProtectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/tag_protections/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List a repository's tags
 */
export const repoListTags = <ThrowOnError extends boolean = false>(options: Options<RepoListTagsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RepoListTagsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/tags',
        ...options
    });
};

/**
 * Create a new git tag in a repository
 */
export const repoCreateTag = <ThrowOnError extends boolean = false>(options: Options<RepoCreateTagData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RepoCreateTagResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/tags',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a repository's tag by name
 */
export const repoDeleteTag = <ThrowOnError extends boolean = false>(options: Options<RepoDeleteTagData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/tags/{tag}',
        ...options
    });
};

/**
 * Get the tag of a repository by tag name
 */
export const repoGetTag = <ThrowOnError extends boolean = false>(options: Options<RepoGetTagData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RepoGetTagResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/tags/{tag}',
        ...options
    });
};

/**
 * List a repository's teams
 */
export const repoListTeams = <ThrowOnError extends boolean = false>(options: Options<RepoListTeamsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RepoListTeamsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/teams',
        ...options
    });
};

/**
 * Delete a team from a repository
 */
export const repoDeleteTeam = <ThrowOnError extends boolean = false>(options: Options<RepoDeleteTeamData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/teams/{team}',
        ...options
    });
};

/**
 * Check if a team is assigned to a repository
 */
export const repoCheckTeam = <ThrowOnError extends boolean = false>(options: Options<RepoCheckTeamData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RepoCheckTeamResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/teams/{team}',
        ...options
    });
};

/**
 * Add a team to a repository
 */
export const repoAddTeam = <ThrowOnError extends boolean = false>(options: Options<RepoAddTeamData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/teams/{team}',
        ...options
    });
};

/**
 * List a repo's tracked times
 */
export const repoTrackedTimes = <ThrowOnError extends boolean = false>(options: Options<RepoTrackedTimesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RepoTrackedTimesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/times',
        ...options
    });
};

/**
 * @deprecated
 * List a user's tracked times in a repo
 */
export const userTrackedTimes = <ThrowOnError extends boolean = false>(options: Options<UserTrackedTimesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UserTrackedTimesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/times/{user}',
        ...options
    });
};

/**
 * Get list of topics that a repository has
 */
export const repoListTopics = <ThrowOnError extends boolean = false>(options: Options<RepoListTopicsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RepoListTopicsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/topics',
        ...options
    });
};

/**
 * Replace list of topics for a repository
 */
export const repoUpdateTopics = <ThrowOnError extends boolean = false>(options: Options<RepoUpdateTopicsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/topics',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a topic from a repository
 */
export const repoDeleteTopic = <ThrowOnError extends boolean = false>(options: Options<RepoDeleteTopicData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/topics/{topic}',
        ...options
    });
};

/**
 * Add a topic to a repository
 */
export const repoAddTopic = <ThrowOnError extends boolean = false>(options: Options<RepoAddTopicData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/topics/{topic}',
        ...options
    });
};

/**
 * Transfer a repo ownership
 */
export const repoTransfer = <ThrowOnError extends boolean = false>(options: Options<RepoTransferData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RepoTransferResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/transfer',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Accept a repo transfer
 */
export const acceptRepoTransfer = <ThrowOnError extends boolean = false>(options: Options<AcceptRepoTransferData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AcceptRepoTransferResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/transfer/accept',
        ...options
    });
};

/**
 * Reject a repo transfer
 */
export const rejectRepoTransfer = <ThrowOnError extends boolean = false>(options: Options<RejectRepoTransferData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RejectRepoTransferResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/transfer/reject',
        ...options
    });
};

/**
 * Create a wiki page
 */
export const repoCreateWikiPage = <ThrowOnError extends boolean = false>(options: Options<RepoCreateWikiPageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RepoCreateWikiPageResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/wiki/new',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a wiki page
 */
export const repoDeleteWikiPage = <ThrowOnError extends boolean = false>(options: Options<RepoDeleteWikiPageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/wiki/page/{pageName}',
        ...options
    });
};

/**
 * Get a wiki page
 */
export const repoGetWikiPage = <ThrowOnError extends boolean = false>(options: Options<RepoGetWikiPageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RepoGetWikiPageResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/wiki/page/{pageName}',
        ...options
    });
};

/**
 * Edit a wiki page
 */
export const repoEditWikiPage = <ThrowOnError extends boolean = false>(options: Options<RepoEditWikiPageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<RepoEditWikiPageResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/wiki/page/{pageName}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get all wiki pages
 */
export const repoGetWikiPages = <ThrowOnError extends boolean = false>(options: Options<RepoGetWikiPagesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RepoGetWikiPagesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/wiki/pages',
        ...options
    });
};

/**
 * Get revisions of a wiki page
 */
export const repoGetWikiPageRevisions = <ThrowOnError extends boolean = false>(options: Options<RepoGetWikiPageRevisionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RepoGetWikiPageRevisionsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{owner}/{repo}/wiki/revisions/{pageName}',
        ...options
    });
};

/**
 * Create a repository using a template
 */
export const generateRepo = <ThrowOnError extends boolean = false>(options: Options<GenerateRepoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GenerateRepoResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repos/{template_owner}/{template_repo}/generate',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get a repository by id
 */
export const repoGetById = <ThrowOnError extends boolean = false>(options: Options<RepoGetByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RepoGetByIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/repositories/{id}',
        ...options
    });
};

/**
 * Get instance's global settings for api
 */
export const getGeneralApiSettings = <ThrowOnError extends boolean = false>(options?: Options<GetGeneralApiSettingsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetGeneralApiSettingsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/settings/api',
        ...options
    });
};

/**
 * Get instance's global settings for Attachment
 */
export const getGeneralAttachmentSettings = <ThrowOnError extends boolean = false>(options?: Options<GetGeneralAttachmentSettingsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetGeneralAttachmentSettingsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/settings/attachment',
        ...options
    });
};

/**
 * Get instance's global settings for repositories
 */
export const getGeneralRepositorySettings = <ThrowOnError extends boolean = false>(options?: Options<GetGeneralRepositorySettingsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetGeneralRepositorySettingsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/settings/repository',
        ...options
    });
};

/**
 * Get instance's global settings for ui
 */
export const getGeneralUiSettings = <ThrowOnError extends boolean = false>(options?: Options<GetGeneralUiSettingsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetGeneralUiSettingsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/settings/ui',
        ...options
    });
};

/**
 * Get default signing-key.gpg
 */
export const getSigningKey = <ThrowOnError extends boolean = false>(options?: Options<GetSigningKeyData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetSigningKeyResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/signing-key.gpg',
        ...options
    });
};

/**
 * Delete a team
 */
export const orgDeleteTeam = <ThrowOnError extends boolean = false>(options: Options<OrgDeleteTeamData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/teams/{id}',
        ...options
    });
};

/**
 * Get a team
 */
export const orgGetTeam = <ThrowOnError extends boolean = false>(options: Options<OrgGetTeamData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OrgGetTeamResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/teams/{id}',
        ...options
    });
};

/**
 * Edit a team
 */
export const orgEditTeam = <ThrowOnError extends boolean = false>(options: Options<OrgEditTeamData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<OrgEditTeamResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/teams/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List a team's activity feeds
 */
export const orgListTeamActivityFeeds = <ThrowOnError extends boolean = false>(options: Options<OrgListTeamActivityFeedsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OrgListTeamActivityFeedsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/teams/{id}/activities/feeds',
        ...options
    });
};

/**
 * List a team's members
 */
export const orgListTeamMembers = <ThrowOnError extends boolean = false>(options: Options<OrgListTeamMembersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OrgListTeamMembersResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/teams/{id}/members',
        ...options
    });
};

/**
 * Remove a team member
 */
export const orgRemoveTeamMember = <ThrowOnError extends boolean = false>(options: Options<OrgRemoveTeamMemberData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/teams/{id}/members/{username}',
        ...options
    });
};

/**
 * List a particular member of team
 */
export const orgListTeamMember = <ThrowOnError extends boolean = false>(options: Options<OrgListTeamMemberData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OrgListTeamMemberResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/teams/{id}/members/{username}',
        ...options
    });
};

/**
 * Add a team member
 */
export const orgAddTeamMember = <ThrowOnError extends boolean = false>(options: Options<OrgAddTeamMemberData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/teams/{id}/members/{username}',
        ...options
    });
};

/**
 * List a team's repos
 */
export const orgListTeamRepos = <ThrowOnError extends boolean = false>(options: Options<OrgListTeamReposData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OrgListTeamReposResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/teams/{id}/repos',
        ...options
    });
};

/**
 * Remove a repository from a team
 * This does not delete the repository, it only removes the repository from the team.
 */
export const orgRemoveTeamRepository = <ThrowOnError extends boolean = false>(options: Options<OrgRemoveTeamRepositoryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/teams/{id}/repos/{org}/{repo}',
        ...options
    });
};

/**
 * List a particular repo of team
 */
export const orgListTeamRepo = <ThrowOnError extends boolean = false>(options: Options<OrgListTeamRepoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OrgListTeamRepoResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/teams/{id}/repos/{org}/{repo}',
        ...options
    });
};

/**
 * Add a repository to a team
 */
export const orgAddTeamRepository = <ThrowOnError extends boolean = false>(options: Options<OrgAddTeamRepositoryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/teams/{id}/repos/{org}/{repo}',
        ...options
    });
};

/**
 * search topics via keyword
 */
export const topicSearch = <ThrowOnError extends boolean = false>(options: Options<TopicSearchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TopicSearchResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/topics/search',
        ...options
    });
};

/**
 * Get the authenticated user
 */
export const userGetCurrent = <ThrowOnError extends boolean = false>(options?: Options<UserGetCurrentData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UserGetCurrentResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/user',
        ...options
    });
};

/**
 * Get an user's actions runner registration token
 */
export const userGetRunnerRegistrationToken = <ThrowOnError extends boolean = false>(options?: Options<UserGetRunnerRegistrationTokenData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/user/actions/runners/registration-token',
        ...options
    });
};

/**
 * Delete a secret in a user scope
 */
export const deleteUserSecret = <ThrowOnError extends boolean = false>(options: Options<DeleteUserSecretData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/user/actions/secrets/{secretname}',
        ...options
    });
};

/**
 * Create or Update a secret value in a user scope
 */
export const updateUserSecret = <ThrowOnError extends boolean = false>(options: Options<UpdateUserSecretData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/user/actions/secrets/{secretname}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get the user-level list of variables which is created by current doer
 */
export const getUserVariablesList = <ThrowOnError extends boolean = false>(options?: Options<GetUserVariablesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUserVariablesListResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/user/actions/variables',
        ...options
    });
};

/**
 * Delete a user-level variable which is created by current doer
 */
export const deleteUserVariable = <ThrowOnError extends boolean = false>(options: Options<DeleteUserVariableData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/user/actions/variables/{variablename}',
        ...options
    });
};

/**
 * Get a user-level variable which is created by current doer
 */
export const getUserVariable = <ThrowOnError extends boolean = false>(options: Options<GetUserVariableData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserVariableResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/user/actions/variables/{variablename}',
        ...options
    });
};

/**
 * Create a user-level variable
 */
export const createUserVariable = <ThrowOnError extends boolean = false>(options: Options<CreateUserVariableData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/user/actions/variables/{variablename}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Update a user-level variable which is created by current doer
 */
export const updateUserVariable = <ThrowOnError extends boolean = false>(options: Options<UpdateUserVariableData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/user/actions/variables/{variablename}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List the authenticated user's oauth2 applications
 */
export const userGetOauth2Application = <ThrowOnError extends boolean = false>(options?: Options<UserGetOauth2ApplicationData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UserGetOauth2ApplicationResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/user/applications/oauth2',
        ...options
    });
};

/**
 * creates a new OAuth2 application
 */
export const userCreateOAuth2Application = <ThrowOnError extends boolean = false>(options: Options<UserCreateOAuth2ApplicationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UserCreateOAuth2ApplicationResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/user/applications/oauth2',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * delete an OAuth2 Application
 */
export const userDeleteOAuth2Application = <ThrowOnError extends boolean = false>(options: Options<UserDeleteOAuth2ApplicationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/user/applications/oauth2/{id}',
        ...options
    });
};

/**
 * get an OAuth2 Application
 */
export const userGetOAuth2Application = <ThrowOnError extends boolean = false>(options: Options<UserGetOAuth2ApplicationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UserGetOAuth2ApplicationResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/user/applications/oauth2/{id}',
        ...options
    });
};

/**
 * update an OAuth2 Application, this includes regenerating the client secret
 */
export const userUpdateOAuth2Application = <ThrowOnError extends boolean = false>(options: Options<UserUpdateOAuth2ApplicationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UserUpdateOAuth2ApplicationResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/user/applications/oauth2/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete Avatar
 */
export const userDeleteAvatar = <ThrowOnError extends boolean = false>(options?: Options<UserDeleteAvatarData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/user/avatar',
        ...options
    });
};

/**
 * Update Avatar
 */
export const userUpdateAvatar = <ThrowOnError extends boolean = false>(options?: Options<UserUpdateAvatarData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/user/avatar',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List users blocked by the authenticated user
 */
export const userListBlocks = <ThrowOnError extends boolean = false>(options?: Options<UserListBlocksData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UserListBlocksResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/user/blocks',
        ...options
    });
};

/**
 * Unblock a user
 */
export const userUnblockUser = <ThrowOnError extends boolean = false>(options: Options<UserUnblockUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/user/blocks/{username}',
        ...options
    });
};

/**
 * Check if a user is blocked by the authenticated user
 */
export const userCheckUserBlock = <ThrowOnError extends boolean = false>(options: Options<UserCheckUserBlockData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/user/blocks/{username}',
        ...options
    });
};

/**
 * Block a user
 */
export const userBlockUser = <ThrowOnError extends boolean = false>(options: Options<UserBlockUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/user/blocks/{username}',
        ...options
    });
};

/**
 * Delete email addresses
 */
export const userDeleteEmail = <ThrowOnError extends boolean = false>(options?: Options<UserDeleteEmailData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/user/emails',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List the authenticated user's email addresses
 */
export const userListEmails = <ThrowOnError extends boolean = false>(options?: Options<UserListEmailsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UserListEmailsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/user/emails',
        ...options
    });
};

/**
 * Add email addresses
 */
export const userAddEmail = <ThrowOnError extends boolean = false>(options?: Options<UserAddEmailData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<UserAddEmailResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/user/emails',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List the authenticated user's followers
 */
export const userCurrentListFollowers = <ThrowOnError extends boolean = false>(options?: Options<UserCurrentListFollowersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UserCurrentListFollowersResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/user/followers',
        ...options
    });
};

/**
 * List the users that the authenticated user is following
 */
export const userCurrentListFollowing = <ThrowOnError extends boolean = false>(options?: Options<UserCurrentListFollowingData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UserCurrentListFollowingResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/user/following',
        ...options
    });
};

/**
 * Unfollow a user
 */
export const userCurrentDeleteFollow = <ThrowOnError extends boolean = false>(options: Options<UserCurrentDeleteFollowData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/user/following/{username}',
        ...options
    });
};

/**
 * Check whether a user is followed by the authenticated user
 */
export const userCurrentCheckFollowing = <ThrowOnError extends boolean = false>(options: Options<UserCurrentCheckFollowingData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/user/following/{username}',
        ...options
    });
};

/**
 * Follow a user
 */
export const userCurrentPutFollow = <ThrowOnError extends boolean = false>(options: Options<UserCurrentPutFollowData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/user/following/{username}',
        ...options
    });
};

/**
 * Get a Token to verify
 */
export const getVerificationToken = <ThrowOnError extends boolean = false>(options?: Options<GetVerificationTokenData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetVerificationTokenResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/user/gpg_key_token',
        ...options
    });
};

/**
 * Verify a GPG key
 */
export const userVerifyGpgKey = <ThrowOnError extends boolean = false>(options?: Options<UserVerifyGpgKeyData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<UserVerifyGpgKeyResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/user/gpg_key_verify',
        ...options
    });
};

/**
 * List the authenticated user's GPG keys
 */
export const userCurrentListGpgKeys = <ThrowOnError extends boolean = false>(options?: Options<UserCurrentListGpgKeysData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UserCurrentListGpgKeysResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/user/gpg_keys',
        ...options
    });
};

/**
 * Create a GPG key
 */
export const userCurrentPostGpgKey = <ThrowOnError extends boolean = false>(options?: Options<UserCurrentPostGpgKeyData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<UserCurrentPostGpgKeyResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/user/gpg_keys',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Remove a GPG key
 */
export const userCurrentDeleteGpgKey = <ThrowOnError extends boolean = false>(options: Options<UserCurrentDeleteGpgKeyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/user/gpg_keys/{id}',
        ...options
    });
};

/**
 * Get a GPG key
 */
export const userCurrentGetGpgKey = <ThrowOnError extends boolean = false>(options: Options<UserCurrentGetGpgKeyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UserCurrentGetGpgKeyResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/user/gpg_keys/{id}',
        ...options
    });
};

/**
 * List the authenticated user's webhooks
 */
export const userListHooks = <ThrowOnError extends boolean = false>(options?: Options<UserListHooksData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UserListHooksResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/user/hooks',
        ...options
    });
};

/**
 * Create a hook
 */
export const userCreateHook = <ThrowOnError extends boolean = false>(options: Options<UserCreateHookData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UserCreateHookResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/user/hooks',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a hook
 */
export const userDeleteHook = <ThrowOnError extends boolean = false>(options: Options<UserDeleteHookData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/user/hooks/{id}',
        ...options
    });
};

/**
 * Get a hook
 */
export const userGetHook = <ThrowOnError extends boolean = false>(options: Options<UserGetHookData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UserGetHookResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/user/hooks/{id}',
        ...options
    });
};

/**
 * Update a hook
 */
export const userEditHook = <ThrowOnError extends boolean = false>(options: Options<UserEditHookData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UserEditHookResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/user/hooks/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List the authenticated user's public keys
 */
export const userCurrentListKeys = <ThrowOnError extends boolean = false>(options?: Options<UserCurrentListKeysData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UserCurrentListKeysResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/user/keys',
        ...options
    });
};

/**
 * Create a public key
 */
export const userCurrentPostKey = <ThrowOnError extends boolean = false>(options?: Options<UserCurrentPostKeyData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<UserCurrentPostKeyResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/user/keys',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a public key
 */
export const userCurrentDeleteKey = <ThrowOnError extends boolean = false>(options: Options<UserCurrentDeleteKeyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/user/keys/{id}',
        ...options
    });
};

/**
 * Get a public key
 */
export const userCurrentGetKey = <ThrowOnError extends boolean = false>(options: Options<UserCurrentGetKeyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UserCurrentGetKeyResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/user/keys/{id}',
        ...options
    });
};

/**
 * List the current user's organizations
 */
export const orgListCurrentUserOrgs = <ThrowOnError extends boolean = false>(options?: Options<OrgListCurrentUserOrgsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<OrgListCurrentUserOrgsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/user/orgs',
        ...options
    });
};

/**
 * List the repos that the authenticated user owns
 */
export const userCurrentListRepos = <ThrowOnError extends boolean = false>(options?: Options<UserCurrentListReposData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UserCurrentListReposResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/user/repos',
        ...options
    });
};

/**
 * Create a repository
 */
export const createCurrentUserRepo = <ThrowOnError extends boolean = false>(options?: Options<CreateCurrentUserRepoData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateCurrentUserRepoResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/user/repos',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get user settings
 */
export const getUserSettings = <ThrowOnError extends boolean = false>(options?: Options<GetUserSettingsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUserSettingsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/user/settings',
        ...options
    });
};

/**
 * Update user settings
 */
export const updateUserSettings = <ThrowOnError extends boolean = false>(options?: Options<UpdateUserSettingsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).patch<UpdateUserSettingsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/user/settings',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * The repos that the authenticated user has starred
 */
export const userCurrentListStarred = <ThrowOnError extends boolean = false>(options?: Options<UserCurrentListStarredData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UserCurrentListStarredResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/user/starred',
        ...options
    });
};

/**
 * Unstar the given repo
 */
export const userCurrentDeleteStar = <ThrowOnError extends boolean = false>(options: Options<UserCurrentDeleteStarData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/user/starred/{owner}/{repo}',
        ...options
    });
};

/**
 * Whether the authenticated is starring the repo
 */
export const userCurrentCheckStarring = <ThrowOnError extends boolean = false>(options: Options<UserCurrentCheckStarringData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/user/starred/{owner}/{repo}',
        ...options
    });
};

/**
 * Star the given repo
 */
export const userCurrentPutStar = <ThrowOnError extends boolean = false>(options: Options<UserCurrentPutStarData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/user/starred/{owner}/{repo}',
        ...options
    });
};

/**
 * Get list of all existing stopwatches
 */
export const userGetStopWatches = <ThrowOnError extends boolean = false>(options?: Options<UserGetStopWatchesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UserGetStopWatchesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/user/stopwatches',
        ...options
    });
};

/**
 * List repositories watched by the authenticated user
 */
export const userCurrentListSubscriptions = <ThrowOnError extends boolean = false>(options?: Options<UserCurrentListSubscriptionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UserCurrentListSubscriptionsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/user/subscriptions',
        ...options
    });
};

/**
 * List all the teams a user belongs to
 */
export const userListTeams = <ThrowOnError extends boolean = false>(options?: Options<UserListTeamsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UserListTeamsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/user/teams',
        ...options
    });
};

/**
 * List the current user's tracked times
 */
export const userCurrentTrackedTimes = <ThrowOnError extends boolean = false>(options?: Options<UserCurrentTrackedTimesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UserCurrentTrackedTimesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/user/times',
        ...options
    });
};

/**
 * Search for users
 */
export const userSearch = <ThrowOnError extends boolean = false>(options?: Options<UserSearchData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UserSearchResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/users/search',
        ...options
    });
};

/**
 * Get a user
 */
export const userGet = <ThrowOnError extends boolean = false>(options: Options<UserGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UserGetResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/users/{username}',
        ...options
    });
};

/**
 * List a user's activity feeds
 */
export const userListActivityFeeds = <ThrowOnError extends boolean = false>(options: Options<UserListActivityFeedsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UserListActivityFeedsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/users/{username}/activities/feeds',
        ...options
    });
};

/**
 * List the given user's followers
 */
export const userListFollowers = <ThrowOnError extends boolean = false>(options: Options<UserListFollowersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UserListFollowersResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/users/{username}/followers',
        ...options
    });
};

/**
 * List the users that the given user is following
 */
export const userListFollowing = <ThrowOnError extends boolean = false>(options: Options<UserListFollowingData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UserListFollowingResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/users/{username}/following',
        ...options
    });
};

/**
 * Check if one user is following another user
 */
export const userCheckFollowing = <ThrowOnError extends boolean = false>(options: Options<UserCheckFollowingData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/users/{username}/following/{target}',
        ...options
    });
};

/**
 * List the given user's GPG keys
 */
export const userListGpgKeys = <ThrowOnError extends boolean = false>(options: Options<UserListGpgKeysData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UserListGpgKeysResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/users/{username}/gpg_keys',
        ...options
    });
};

/**
 * Get a user's heatmap
 */
export const userGetHeatmapData = <ThrowOnError extends boolean = false>(options: Options<UserGetHeatmapDataData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UserGetHeatmapDataResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/users/{username}/heatmap',
        ...options
    });
};

/**
 * List the given user's public keys
 */
export const userListKeys = <ThrowOnError extends boolean = false>(options: Options<UserListKeysData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UserListKeysResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/users/{username}/keys',
        ...options
    });
};

/**
 * List a user's organizations
 */
export const orgListUserOrgs = <ThrowOnError extends boolean = false>(options: Options<OrgListUserOrgsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OrgListUserOrgsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/users/{username}/orgs',
        ...options
    });
};

/**
 * Get user permissions in organization
 */
export const orgGetUserPermissions = <ThrowOnError extends boolean = false>(options: Options<OrgGetUserPermissionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OrgGetUserPermissionsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/users/{username}/orgs/{org}/permissions',
        ...options
    });
};

/**
 * List the repos owned by the given user
 */
export const userListRepos = <ThrowOnError extends boolean = false>(options: Options<UserListReposData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UserListReposResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/users/{username}/repos',
        ...options
    });
};

/**
 * The repos that the given user has starred
 */
export const userListStarred = <ThrowOnError extends boolean = false>(options: Options<UserListStarredData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UserListStarredResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/users/{username}/starred',
        ...options
    });
};

/**
 * List the repositories watched by a user
 */
export const userListSubscriptions = <ThrowOnError extends boolean = false>(options: Options<UserListSubscriptionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UserListSubscriptionsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/users/{username}/subscriptions',
        ...options
    });
};

/**
 * List the authenticated user's access tokens
 */
export const userGetTokens = <ThrowOnError extends boolean = false>(options: Options<UserGetTokensData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UserGetTokensResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/users/{username}/tokens',
        ...options
    });
};

/**
 * Create an access token
 */
export const userCreateToken = <ThrowOnError extends boolean = false>(options: Options<UserCreateTokenData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UserCreateTokenResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/users/{username}/tokens',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * delete an access token
 */
export const userDeleteAccessToken = <ThrowOnError extends boolean = false>(options: Options<UserDeleteAccessTokenData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/users/{username}/tokens/{token}',
        ...options
    });
};

/**
 * Returns the version of the Gitea application
 */
export const getVersion = <ThrowOnError extends boolean = false>(options?: Options<GetVersionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetVersionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'basic',
                type: 'http'
            },
            {
                in: 'query',
                name: 'token',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'access_token',
                type: 'apiKey'
            },
            {
                name: 'Authorization',
                type: 'apiKey'
            },
            {
                in: 'query',
                name: 'sudo',
                type: 'apiKey'
            },
            {
                name: 'Sudo',
                type: 'apiKey'
            },
            {
                name: 'X-GITEA-OTP',
                type: 'apiKey'
            }
        ],
        url: '/version',
        ...options
    });
};